This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci-docs.yml
bop_modeling_data/
  macros/
    dates/
      test_policy_eff_date_in_expected_range.sql
    keys/
      policy_key.sql
    recoding/
      recode__citystate_to_city.sql
      recode__company_code.sql
      recode__comparative_rater.sql
      recode__currency_to_int.sql
      recode__experian_date_of_data.sql
      recode__percent.sql
      recode__prem_to_has_coverage_ind.sql
      recode__sas_date_format.sql
      recode__state_cds.sql
      recode__text_ind.sql
      recode__unit.sql
      recode__year_column.sql
      recode__yes_no_ind.sql
      recode__zip_code.sql
      recode__zip_plus_four_code.sql
      recode_to_millions.sql
    coalesce_credit_variables.sql
    col_and_is_col_missing.sql
    column_list.sql
    dev_date_filter.sql
    easi_variables.sql
    expect__expect_col1_ge_col2.sql
    first_report_date_after_date.sql
    first_report_date_before_date.sql
    five_key.sql
    generate_date_index.sql
    generate_is_lro.sql
    generate_lro_type.sql
    hr_components__load_lookups.sql
    init_sql.sql
    is_missing_var.sql
    is_uw_method_std.sql
    is_value_positive.sql
    log1p.sql
    logit.sql
    make_n_prior_year_cols.sql
    mdy.sql
    mosum_columns.sql
    prem_ratio.sql
    select_naics_cd.sql
    sigmoid.sql
    with_ref.sql
  models/
    00_raw/
      billing/
        _docs.md
        _schema.yml
        raw__screngn__xcd_bil_account.sql
        raw__screngn__xcd_bil_act_summary.sql
        raw__screngn__xcd_bil_cash_dsp.sql
        raw__screngn__xcd_bil_cash_receipt.sql
        raw__screngn__xcd_bil_des_reason.sql
        raw__screngn__xcd_bil_ist_schedule.sql
        raw__screngn__xcd_bil_pol_proc_req.sql
        raw__screngn__xcd_bil_policy_trm.sql
        raw__screngn__xcd_bil_policy.sql
      decfile/
        _schema.yml
        raw__decfile__sb_aiv_lookup.sql
        raw__decfile__sb_policy_lookup.sql
        raw__decfile__screngn_policy_lookup.sql
      modcom/
        raw__modcom__policy_chain_v3.py
    01_stg/
      current_cincibill/
        _schema.yml
        stg__cur_cb__xcd_bil_act_summary.sql
        stg__cur_cb__xcd_bil_cash_dsp.sql
        stg__cur_cb__xcd_bil_policy.sql
        stg__cur_cb.sql
      decfile/
        stg__decfile__sb_policy_lookup.sql
      modcom/
        _schema.yml
        stg__modcom__policy_chain_v3.sql
      screngn/
        stg__screngn__xcd_bil_account.sql
        stg__screngn__xcd_bil_act_summary.sql
        stg__screngn__xcd_bil_cash_dsp.sql
        stg__screngn__xcd_bil_cash_receipt.sql
        stg__screngn__xcd_bil_des_reason.sql
        stg__screngn__xcd_bil_ist_schedule.sql
        stg__screngn__xcd_bil_pol_proc_req.sql
        stg__screngn__xcd_bil_policy_trm.sql
        stg__screngn__xcd_bil_policy.sql
    02_lkp/
      _schema.yml
      lkp__associated_policies.sql
      lkp__billing_policies.sql
      lkp__dates.sql
      lkp__first_billing_activity_date.sql
      lkp__policy_chain_ids.sql
      lkp__sb_policy_key.sql
    03_fct/
      _schema.yml
      fct__associated_policy_eff_date.sql
      fct__billing_activity.sql
      fct__prior_activity_dates.sql
    06_chk/
      _schema.yml
      chk__lkp__associated_policies__row_counts.sql
    07_tmp/
      lkp__associated_policies_counts/
        _lkp__associated_policies_counts__add_final_associated_policy_key.sql
        _lkp__associated_policies_counts__associated_policies.sql
        _lkp__associated_policies_counts__filtered_policy_chains.sql
        _lkp__associated_policies_counts__policy_chain.sql
        _lkp__associated_policies_counts__sb_policies.sql
        _lkp__associated_policies_counts.sql
    sources.yml
  tests/
    test_that_no_duplicated_policies_in_lkp__associated_policies.sql
  dbt_project.yml
pyproject.toml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="bop_modeling_data/macros/dates/test_policy_eff_date_in_expected_range.sql">
{%- macro test_policy_eff_date_in_expected_range(model_name, date_col='policy_eff_date') -%}
    select {{ date_col }} as policy_eff_date
    from {{ ref('model_name') }}
    where 
        {{ date_col }} >= {{ var('policy_eff_date__max_yrmo') }}
        or {{ date_col }} <= {{ var('policy_eff_date__min_yrmo') }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/keys/policy_key.sql">
{%- macro policy_key(
    company_numb='company_numb',  
    policy_sym='policy_sym',
    policy_numb='policy_numb',
    policy_module='policy_module',
    policy_eff_date='policy_eff_date'
) -%}
    md5_number(
        try_cast(company_numb as varchar)
        || policy_sym 
        || try_cast(policy_numb as varchar)
        || try_cast(policy_module as varchar)
        || try_cast(year(policy_eff_date) as varchar)
        || try_cast(month(policy_eff_date) as varchar)
        || try_cast(day(policy_eff_date) as varchar)
    )
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__text_ind.sql">
{%- macro recode__text_ind(old_column, new_column) -%}
case
    when lower(try_cast({{ old_column }} as text)) = 'true' then 1
    when lower(try_cast({{ old_column }} as text)) = 'yes' then 1
    when lower(try_cast({{ old_column }} as text)) = 't' then 1
    when lower(try_cast({{ old_column }} as text)) = 'y' then 1
    when lower(try_cast({{ old_column }} as text)) = '1' then 1
    when lower(try_cast({{ old_column }} as text)) = '1.0' then 1

    when lower(try_cast({{ old_column }} as text)) = 'false' then 0
    when lower(try_cast({{ old_column }} as text)) = 'no' then 0
    when lower(try_cast({{ old_column }} as text)) = 'f' then 0
    when lower(try_cast({{ old_column }} as text)) = 'n' then 0
    when lower(try_cast({{ old_column }} as text)) = '0' then 0
    when lower(try_cast({{ old_column }} as text)) = '0.0' then 0

    when lower(try_cast({{ old_column }} as text)) = 'missing' then 0
    else 0
end as {{ new_column }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__yes_no_ind.sql">
{%- macro recode__yes_no_ind(old_column, new_column) -%}
case
    when try_cast({{ old_column }} as text) = 'Yes' then 1
    when try_cast({{ old_column }} as text) = 'No' then 0
    when try_cast({{ old_column }} as text) = 'Missing' then 0
    else 0
end as {{ new_column }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/five_key.sql">
{%- macro five_key() -%}
    company_numb,
    policy_sym,
    policy_numb,
    policy_module,
    policy_eff_date
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/generate_is_lro.sql">
{%- macro generate_is_lro(lro_type, class_code, is_lro) -%}

{%- set class_code -%}
coalesce(try_cast({{ class_code }} as integer), 0) 
{%- endset -%}

{%- if lro_type=='office' -%}
case when {{ class_code }} = 10151 then 1 else 0 end as is_lro_office
{%- elif lro_type=='retail' -%}
case when {{ class_code }} = 10156 then 1 else 0 end as is_lro_retail_service
{%- elif lro_type=='wholesale' -%}
case when {{ class_code }} = 10157 then 1 else 0 end as is_lro_wholesale_distribution
{%- elif lro_type=='shopping_center' -%}
case when {{ class_code }} = 10158 then 1 else 0 end as is_lro_shopping_center
{%- else -%}
case when {{ is_lro }} then 1 else 0 end as is_lro_other
{%- endif -%}

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/generate_lro_type.sql">
{%- macro generate_lro_type(class_code) -%}

{%- set class_code -%}
coalesce(try_cast({{ class_code }} as integer), 0) 
{%- endset -%}

case
    when class_code = 10151 then 'office'
    when class_code = 10156 then 'retail_service'
    when class_code = 10157 then 'wholesale_distribution'
    when class_code = 10158 then 'shopping_center'
    else 'other'
end as lro_type

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/mdy.sql">
{%- macro mdy(month, day, year) -%}
try_cast(
    concat(
        try_cast({{ year }} as varchar),
        '-',
        try_cast({{ month }} as varchar),
        '-',
        try_cast({{ day }} as varchar)
    ) as date
)
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/sigmoid.sql">
{%- macro sigmoid(old_column_name, new_column_name) -%}
(1 / (1 + exp(- {{ old_column_name }}))) as {{ new_column_name }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/with_ref.sql">
{%- macro with_ref(ref_name, cte_name) -%}
{{ cte_name }} as (
    select *
    from {{ ref(ref_name) }}
)
{%- endmacro -%}
</file>

<file path="bop_modeling_data/models/00_raw/billing/_docs.md">
{% docs bil_account_id_hash %}
`sha256` hash of `bil_account_id`. Can be used in joins since an integer should be easier to lookup.
{% enddocs %}
</file>

<file path="bop_modeling_data/models/00_raw/modcom/raw__modcom__policy_chain_v3.py">
logger = logging.getLogger(__name__)
⋮----
EGSB = Path("/sas/data/project/EG/ActShared/SmallBusiness/Modeling/dat")
MODCOM = Path("/sas/data/project/EG/ActShared/ModelCommon")
FILENAME = "policy_chain_v3.sas7bdat"
⋮----
CHUNK_SIZE = 1_000_000
⋮----
JOIN_PART="""
⋮----
COLS = """try_cast(policy_chain_id as uinteger) as policy_chain_id,
⋮----
FIRST_QUERY=f"""CREATE OR REPLACE TABLE raw_tbl AS (
⋮----
EVERY_OTHER_QUERY=f"""CREATE OR REPLACE TABLE raw_tbl AS (
⋮----
df_params={
⋮----
def model(dbt, session)
⋮----
counter = 1
⋮----
out = conn.sql("SELECT * FROM raw_tbl").df()
</file>

<file path="bop_modeling_data/models/01_stg/current_cincibill/_schema.yml">
models:
  - name: stg__cur_cb__xcd_bil_policy
    columns:
      - name: billing_acct_key
        data_type: bigint
        data_tests:
          - not_null
      - name: billing_acct_id
        data_type: varchar
      - name: billing_acct_numb
        data_type: bigint
      - name: policy_sym
        data_type: varchar
      - name: policy_numb
        data_type: varchar
  - name: stg__cur_cb__xcd_bil_act_summary
    description: |-
      #### Adapted from the following original SAS snippet

      ```sas
      PROC SQL;
      CREATE TABLE rnpc_all AS
          SELECT
              bil_account_id
         	,bil_acy_dt
         	,bil_acy_seq
         	,bil_acy_amt
        	,SUBSTR(STRIP(pol_symbol_cd),1,2) length=2 as pol_symbol_2
        	,SUBSTR(STRIP(pol_nbr),1,7) length=7 as pol_nbr
          FROM screngn.xcd_bil_act_summary
          WHERE 
              bil_acy_des_cd = 'C' 
              AND bil_des_rea_typ = ''
          ORDER BY
        	bil_account_id
        	,bil_acy_dt desc
        	,bil_acy_seq desc; 
      QUIT;
      ```
</file>

<file path="bop_modeling_data/models/01_stg/modcom/stg__modcom__policy_chain_v3.sql">
with

raw as (
    select distinct
        policy_chain_id,
        company_numb,
        policy_sym,
        policy_numb,
        policy_module,
        policy_eff_date


    from {{ ref('raw__modcom__policy_chain_v3') }}
),

add_keys as (
    select         
        md5_number(try_cast(company_numb as varchar) 
            || policy_sym 
            || try_cast(policy_numb as varchar) 
            || try_cast(policy_module as varchar)
            || try_cast(policy_eff_date as varchar)) as five_key_hash,
        md5_number(policy_sym 
            || try_cast(policy_numb as varchar) 
            || try_cast(policy_eff_date as varchar)) as three_key_hash,
        *

    from raw
    order by
        five_key_hash,
        three_key_hash
)

select *
from add_keys
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_account.sql">
with

{{ with_ref('raw__screngn__xcd_bil_account', 'raw') }},

renamed_casted as (
    select 
        BIL_ACCOUNT_ID as billing_acct_id,
        try_cast(BIL_ACCOUNT_NBR as ubigint) as billing_acct_numb,
        BIL_CLASS_CD as billing_class_cd,
        BAT_PAY_CLT_ID as billing_acct_paying_client_id,
        BIL_SUS_FU_REA_CD as billing_suspense_followup_reason_cd,
        try_cast(BAT_PREV_BAL_AMT as double) as billing_acct_previous_balance_amt,
        BAT_CASH_STATUS_CD as billing_acct_cash_status_cd,
        BIL_SUS_DSB_REA_CD as billing_suspense_disbursement_reason_cd,
        APP_MIGRATION_CD as app_migration_cd,
        BIL_TYPE_CD as billing_type_cd,
        BIL_TYPE_DESC as billing_type_desc,
        BAT_STATUS_CD as billing_acct_status_cd,
        BAT_STATUS_DESC as billing_acct_status_desc,
        BIL_PRESENTMENT_CD as billing_presentment_cd,
        BIL_PRESENTMENT_DESC as billing_presentment_desc,
        BIL_COLLECTION_MTH as billing_collection_method,
        BIL_COLLECTION_METHOD_DESC as billing_collection_method_desc,
        BIL_COLLECTION_PLN as billing_collection_plan,
        BIL_COLLECTION_PLN_DESC as billing_collection_plan_desc,
        bil_account_id_hash, -- Keep hash generated in raw

        * replace (
            try_cast(bat_start_due_dt as date) as BAT_START_DUE_DT,
            coalesce(try_cast(bat_last_day_ind as integer), -1) as BAT_LAST_DAY_IND,
            try_cast(BIL_START_RFR_DT as date) as BIL_START_RFR_DT,
            coalesce(try_cast(BIL_RFR_LST_DAY as integer), -1) as BIL_RFR_LST_DAY,

            try_cast(BIL_LOK_TS as datetime) as BIL_LOK_TS,
            try_cast(BIL_START_DED_DT as date) as BIL_START_DED_DT,
            try_cast(BIL_START_DED_RFR_DT as date) as BIL_START_DED_RFR_DT
        )

    from raw
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_act_summary.sql">
with

raw as (
    select
        * replace(
        {{ recode__sas_date_format('BIL_ACY_DT') }} as BIL_ACY_DT,
        {{ recode__sas_date_format('BIL_ACY_DES1_DT') }} as BIL_ACY_DES1_DT,
        {{ recode__sas_date_format('BIL_ACY_DES2_DT') }} as BIL_ACY_DES2_DT
    )

    from {{ ref('raw__screngn__xcd_bil_act_summary') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_cash_dsp.sql">
with

raw as (
    select 
        bil_account_id,
        bil_account_id_hash,
        * exclude(
            bil_account_id,
            bil_account_id_hash
        ) replace (
            try_cast(bil_dtb_dt as date) as BIL_DTB_DT,
            try_cast(POL_NBR as ubigint) as POL_NBR,
            {{ recode__sas_date_format('POL_EFFECTIVE_DT') }} as POL_EFFECTIVE_DT,
            {{ recode__sas_date_format('BIL_ADJ_DUE_DT') }} as BIL_ADJ_DUE_DT,
            {{ recode__sas_date_format('BIL_INV_DT') }} as BIL_INV_DT,
            {{ recode__sas_date_format('BIL_DSP_DT') }} as BIL_DSP_DT
        )

    from {{ ref('raw__screngn__xcd_bil_cash_dsp') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_cash_receipt.sql">
with

raw as (
    select 
        bil_account_id,
        bil_account_id_hash,
        * exclude(
            bil_account_id,
            bil_account_id_hash
        ) replace(
            {{ recode__sas_date_format('BIL_DTB_DT') }} as BIL_DTB_DT,
            {{ recode__sas_date_format('BIL_DEPOSIT_DT') }} as BIL_DEPOSIT_DT,
            {{ recode__sas_date_format('BIL_RCT_RECEIVE_DT') }} as BIL_RCT_RECEIVE_DT
        ) 

    from {{ ref('raw__screngn__xcd_bil_cash_receipt') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_des_reason.sql">
with

raw as (
    select *
    from {{ ref('raw__screngn__xcd_bil_des_reason') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_ist_schedule.sql">
with

raw as (
    select
        bil_account_id,
        bil_account_id_hash,
        * exclude(
            bil_account_id,
            bil_account_id_hash
        ) replace (
            {{ recode__sas_date_format('POL_EFFECTIVE_DT') }} as POL_EFFECTIVE_DT,
            {{ recode__sas_date_format('BIL_INV_DT') }} as BIL_INV_DT,
            {{ recode__sas_date_format('BIL_ADJ_DUE_DT') }} as BIL_ADJ_DUE_DT,
            {{ recode__sas_date_format('BIL_REFERENCE_DT') }} as BIL_REFERENCE_DT,
        ) 

    from {{ ref('raw__screngn__xcd_bil_ist_schedule') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_pol_proc_req.sql">
with

raw as (
    select
        bil_account_id,
        bil_account_id_hash,
        * exclude(
            bil_account_id,
            bil_account_id_hash
        ) replace (
            {{ recode__sas_date_format('POL_EFFECTIVE_DT') }} as POL_EFFECTIVE_DT,
            {{ recode__sas_date_format('BIL_ACT_DT') }} as BIL_ACT_DT
        ) 

    from {{ ref('raw__screngn__xcd_bil_pol_proc_req') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_policy_trm.sql">
with 

raw as (
    select 
        bil_account_id,
        bil_account_id_hash,
        * exclude(
            bil_account_id,
            bil_account_id_hash
        ) replace(
            {{ recode__sas_date_format('POL_EFFECTIVE_DT') }} as POL_EFFECTIVE_DT,
            {{ recode__sas_date_format('PLN_EXP_DT') }} as PLN_EXP_DT,
            {{ recode__sas_date_format('BPT_STATUS_EFF_DT') }} as BPT_STATUS_EFF_DT,
            {{ recode__sas_date_format('BPT_UW_STA_EFF_DT') }} as BPT_UW_STA_EFF_DT
        ) 

    from {{ ref('raw__screngn__xcd_bil_policy_trm') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/screngn/stg__screngn__xcd_bil_policy.sql">
with

raw as (
    select
        bil_account_id,
        bil_account_id_hash,
        * exclude(
            bil_account_id,
            bil_account_id_hash
        ) replace (
            try_cast(POL_NBR as ubigint) as POL_NBR
        )

    from {{ ref('raw__screngn__xcd_bil_policy') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/02_lkp/lkp__dates.sql">
with

input_date as (
    select distinct policy_eff_date as input_date
    from {{ ref('lkp__sb_policy_key') }}
    order by input_date
),

prior_year1 as (
    select
        input_date,
        1 as n_prior_years,
        input_date - interval 1 year as prior_year_start,
        input_date - interval 4 month as prior_year_end

    from input_date
),

prior_year2 as (
    select
        input_date,
        2 as n_prior_years,
        input_date - interval 2 year as prior_year_start,
        input_date - interval 1 year as prior_year_end

    from input_date
),

prior_year3 as (
    select
        input_date,
        3 as n_prior_years,
        input_date - interval 3 year as prior_year_start,
        input_date - interval 2 year as prior_year_end

    from input_date
),

prior_year4 as (
    select
        input_date,
        4 as n_prior_years,
        input_date - interval 4 year as prior_year_start,
        input_date - interval 3 year as prior_year_end

    from input_date
),

prior_year5 as (
    select
        input_date,
        5 as n_prior_years,
        input_date - interval 5 year as prior_year_start,
        input_date - interval 4 year as prior_year_end

    from input_date
),

prior_dates as (
    select * from prior_year1
    union select * from prior_year2
    union select * from prior_year3
    union select * from prior_year4
    union select * from prior_year5
)

select distinct 
    input_date,
    n_prior_years,
    try_cast(prior_year_start as date) as prior_year_start,
    try_cast(prior_year_end as date) as prior_year_end

from prior_dates
order by
    input_date,
    n_prior_years
</file>

<file path="bop_modeling_data/models/02_lkp/lkp__first_billing_activity_date.sql">
with

{{ with_ref('fct__billing_activity', 'raw') }},

drop_cols as (
    select distinct 
        activity_trans_key, 
        billing_activity_date

    from raw
    order by 
        activity_trans_key, 
        billing_activity_date
),

min_date_is_the_first_billing_activity_date as (
    select
        activity_trans_key,
        min(billing_activity_date) as first_billing_activity_date

    from drop_cols
    group by activity_trans_key
    order by activity_trans_key
)

select *
from min_date_is_the_first_billing_activity_date
</file>

<file path="bop_modeling_data/models/02_lkp/lkp__sb_policy_key.sql">
with

raw as (
    select *
    from {{ ref('stg__decfile__sb_policy_lookup') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/03_fct/_schema.yml">
models:
  - name: fct__associated_policy_eff_date
    columns:
      - name: associated_policy_key
        data_type: hugeint
      - name: policy_eff_date
        data_type: date
      - name: n_prior_years
        data_type: integer
      - name: prior_year_start
        data_type: date
      - name: prior_year_end
        data_type: date
</file>

<file path="bop_modeling_data/models/03_fct/fct__billing_activity.sql">
with

{{ with_ref('stg__cur_cb', 'raw') }},
{{ with_ref('lkp__dates', 'dates') }},

add_activity_transaction_key as (
    select 
        md5_number(
            try_cast(billing_acct_key as varchar)
            || try_cast(year(billing_activity_date) as varchar)
            || try_cast(month(billing_activity_date) as varchar)
            || try_cast(day(billing_activity_date) as varchar)
            || try_cast(billing_sb_policy_key as varchar)
            || try_cast(associated_policy_key as varchar)
            || try_cast(associated_sb_policy_key as varchar)
            || try_cast(billing_policy_key as varchar)
        ) as activity_trans_key,
        associated_policy_key,
        associated_sb_policy_key,
        billing_activity_date,
        billing_activity_amt

    from raw
    order by 
        associated_policy_key,
        associated_sb_policy_key,
        billing_activity_date
)

select *
from add_activity_transaction_key
</file>

<file path="bop_modeling_data/models/03_fct/fct__prior_activity_dates.sql">
with

{{ with_ref('fct__associated_policy_eff_date', 'policy_eff_date') }},
{{ with_ref('fct__billing_activity', 'activity') }},

joined as (
    select distinct
        activity.activity_trans_key,
        activity.billing_activity_date,
        policy_eff_date.policy_eff_date

    from activity 
    left join policy_eff_date 
        on activity.associated_policy_key = policy_eff_date.associated_policy_key
    where 
        coalesce(
            policy_eff_date.policy_eff_date,
            {{ mdy(12, 31, 9999) }}
        ) > {{ mdy(12, 31, 9999) }}
),

prior_year_columns as (
    {{ make_n_prior_year_cols('joined') }}
),

filter_out_activity_not_knowable_at_policy_eff_date as (
    select *
    from prior_year_columns
    where policy_eff_date < billing_activity_date
    order by 
        activity_trans_key,
        billing_activity_date
)


select *
from filter_out_activity_not_knowable_at_policy_eff_date
</file>

<file path="bop_modeling_data/models/06_chk/_schema.yml">
models:
  - name: chk__lkp__associated_policies__row_counts
    description: This model checks the row counts at each step required for the `lkp__associated_policies` model.
    columns:
      - name: cte
        data_type: varchar
        description: This is the specific cte step the row count refers to.
        data_tests:
          - not_null
          - unique
          - accepted_values:
              values:
                - associated_policies
                - sb_policies
                - add_final_associated_policy_key
                - policy_chain
                - filtered_policy_chains
      - name: cnt
        data_type: bigint
        description: Row count for the CTE. Starting with `sb_policies`, which is the most restrictive, you should expect that the number will increase.
</file>

<file path="bop_modeling_data/models/07_tmp/lkp__associated_policies_counts/_lkp__associated_policies_counts__filtered_policy_chains.sql">
{{
    config(materialization='ephemeral')
}}

with

sb_policies as (
    select * exclude (sb_policies__nrows)
    from {{ ref('_lkp__associated_policies_counts__sb_policies') }}
),

policy_chain as (
    select * exclude (policy_chain__nrows)
    from {{ ref('_lkp__associated_policies_counts__policy_chain') }}
),

filtered_policy_chains as (
    select 
        sb_policies.sb_policy_key as associated_sb_policy_key,
        policy_chain.*,
        count(*) over() as filtered_policy_chains__nrows

    from policy_chain
    inner join sb_policies
        on policy_chain.policy_chain_id = sb_policies.policy_chain_id

    where policy_chain.policy_chain_id is not null
)

select *
from filtered_policy_chains
</file>

<file path="bop_modeling_data/models/07_tmp/lkp__associated_policies_counts/_lkp__associated_policies_counts__sb_policies.sql">
{{
    config(materialization='table')
}}

with

sb_policies as (
    select 
        *,
        count(*) over() as sb_policies__nrows

    from {{ ref('stg__decfile__sb_policy_lookup') }}
)

select *
from sb_policies
</file>

<file path="bop_modeling_data/models/07_tmp/lkp__associated_policies_counts/_lkp__associated_policies_counts.sql">
with

associated_policies as (
    select * exclude (add_final_associated_policy_key__nrows)
    from {{ ref('_lkp__associated_policies_counts__add_final_associated_policy_key') }}
)

select *
from associated_policies
</file>

<file path="bop_modeling_data/macros/recoding/recode__citystate_to_city.sql">
{# There is at least one version of city name in the form: City, ST (2-digit state abbreviation). 
This macro will try to extract just the city. #}

{%- macro recode__citystate_to_city(column) -%}

regexp_replace(
    regexp_replace(
        {{ column }}, 
        ', [A-Z][A-Z]', 
        ''
    ),
    ',[]+', {# remove trailing commas and whatever comes after them #}
    ''
)

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__company_code.sql">
{% macro recode__company_code(column_name) -%}
        case
            when lower({{ column_name }}) = 'cic' then 5
            when lower({{ column_name }}) = 'ccc' then 7
            when lower({{ column_name }}) = 'cid' then 3
            when lower({{ column_name }}) = 'csu' then 1
            else null
        end
{%- endmacro %}
</file>

<file path="bop_modeling_data/macros/recoding/recode__comparative_rater.sql">
{%- macro recode__comparative_rater() -%}
case
    when lower(comparative_rater_vendor) = 'tarmika'
        then 'tarmika'
    when lower(comparative_rater_vendor) = 'eqcl-prod'
        then 'eqcl-prod'
    when lower(comparative_rater_vendor) = 'no vendor name received'
        then 'none'
    when lower(comparative_rater_vendor) = 'missing'
        then 'none'
    else 'other_unknown'
end
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__currency_to_int.sql">
{%- macro recode__currency_to_int(column_name) -%}
try_cast(round(100 * try_cast( {{ column_name }} as ubigint), 0) as ubigint)
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__experian_date_of_data.sql">
{%- macro recode__experian_date_of_data(column) -%}
try_cast(substring({{ column }}, 1, 2) || '/01/' || substring({{ column }}, 3, 4) as date)
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__percent.sql">
{% macro recode__percent(column_name) -%}
        case
            when median(try_cast({{ column_name }} as double)) over () > 1 then try_cast({{ column_name }} as double) / 100
            else try_cast({{ column_name }} as double)
        end
{%- endmacro %}
</file>

<file path="bop_modeling_data/macros/recoding/recode__prem_to_has_coverage_ind.sql">
{%- set prem_cols=["data_defender","network_defender","prop","bpp","building","eq","eq_bpp","eq_building","liab","cyber","hno_liab","prof_liab"] -%}

{%- macro recode__prem_to_has_coverage_ind(old_column, new_column) -%}
case
    when try_cast({{ old_column }} as float) > 0 then 1
    when try_cast({{ old_column }} as float) <= 0 then 0
    else 0
end as {{ new_column }},
{%- endmacro -%}

{%- macro recode_cols() -%}
    {% for col in prem_cols %}
        {{ recode__prem_to_has_coverage_ind(col ~ '_prem', 'has_' ~ col) }}
    {% endfor %}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__state_cds.sql">
{% macro recode__state_cds(column_name) -%}
        {{ column_name }}
{%- endmacro %}
</file>

<file path="bop_modeling_data/macros/recoding/recode__unit.sql">
{%- macro recode__unit() -%}
case
    when lower(unit) = 'cccc'
        then 'cccc'
    when lower(unit) = 'commercial lines'
        then 'sbiz'
    when lower(unit) = 'small business'
        then 'sbiz'
    else 'other_unknown'
end
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__year_column.sql">
{%- macro get_year_business_started() -%}
try_cast(
    case
        {# normal case: when experian_year_business_started exists and is > 1000 #}
        when try_cast(experian_year_business_started as integer) is not null
            and coalesce(try_cast(experian_year_business_started as integer), 0) > 1000
            then coalesce(try_cast(experian_year_business_started as integer), 0)
        
        {# when experian_year_business_started exists but is < 1000, if < 200, subtract #}
        {# the value from the original submission create year, assuming it is really a business #}
        {# age, not a year #}
        when coalesce(try_cast(experian_year_business_started as integer), 0) < 1000
            then year(submission_created_date) - coalesce(try_cast(experian_year_business_started as integer), 0)

        {# when experian_year_business_started is null, try to reconstruct it from #}
        {# acct_years in business and/or evolve_tier_years in business #}
        when try_cast(experian_year_business_started as integer) is null
            then case

                {# first try acct_years in business -- if it is > 1000, it is probably #}
                {# year and not an age, so use it as is #}
                when try_cast(acct_years_in_business as integer) is not null
                    and coalesce(try_cast(acct_years_in_business as integer), 0) > 1000
                    then coalesce(try_cast(acct_years_in_business as integer), 0)

                {# now do the same  thing for evolve_tier_years_in_business #}
                when try_cast(evolve_tier_years_in_business as integer) is not null
                    and coalesce(try_cast(evolve_tier_years_in_business as integer), 0) > 1000
                    then coalesce(try_cast(evolve_tier_years_in_business as integer), 0)

                {# if acct_years_in_business is < 1000, assume it is actually #}
                {# a business age, so add 2000 to  #}
                when try_cast(acct_years_in_business as integer) is not null
                    and coalesce(try_cast(acct_years_in_business as integer), 0) < 1000
                    then year(submission_created_date) - coalesce(try_cast(acct_years_in_business as integer), 0)

                {# do the same thing for evolve_tier_years_in_business #}
                when try_cast(evolve_tier_years_in_business as integer) is not null
                    and coalesce(try_cast(evolve_tier_years_in_business as integer), 0) < 1000
                    then year(submission_created_date) - coalesce(try_cast(evolve_tier_years_in_business as integer), 0)

                {# if all else fails, return null #}
                else null
            end
        else coalesce(try_cast(experian_year_business_started as integer), 0)
    end as integer
)

{%- endmacro -%}


{%- macro get_years_in_business() -%}

try_cast(
    case
        {# normal case: when experian_years_in_business_code exists and is > 1000 #}
        when try_cast(experian_years_in_business_code as integer) is not null
            and coalesce(try_cast(experian_years_in_business_code as integer), 0) > 1000
            then coalesce(try_cast(experian_years_in_business_code as integer), 0)
        
        {# when experian_years_in_business_code exists but is < 1000, if < 200, subtract #}
        {# the value from the original submission create year, assuming it is really a business #}
        {# age, not a year #}
        when coalesce(try_cast(experian_years_in_business_code as integer), 0) < 1000
            then year(submission_created_date) - coalesce(try_cast(experian_years_in_business_code as integer), 0)

        {# when experian_years_in_business_code is null, try to reconstruct it from #}
        {# acct_years in business and/or evolve_tier_years in business #}
        when try_cast(experian_years_in_business_code as integer) is null
            then case

                {# first try acct_years in business -- if it is > 1000, it is probably #}
                {# year and not an age, so use it as is #}
                when try_cast(acct_years_in_business as integer) is not null
                    and coalesce(try_cast(acct_years_in_business as integer), 0) > 1000
                    then coalesce(try_cast(acct_years_in_business as integer), 0)

                {# now do the same  thing for evolve_tier_years_in_business #}
                when try_cast(evolve_tier_years_in_business as integer) is not null
                    and coalesce(try_cast(evolve_tier_years_in_business as integer), 0) > 1000
                    then coalesce(try_cast(evolve_tier_years_in_business as integer), 0)

                {# if acct_years_in_business is < 1000, assume it is actually #}
                {# a business age, so add 2000 to  #}
                when try_cast(acct_years_in_business as integer) is not null
                    and coalesce(try_cast(acct_years_in_business as integer), 0
    as integer
)


{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__zip_code.sql">
{%- macro recode__zip_code() -%}
    {%- set column_hierarchy = [
        "zip_code",
        "location_zip_code",
        "first_insured_zip_code",
        "zip_plus_four_code",
        "first_insured_zip_plus_four_code",
    ] -%}
    {%- set zip_code_regex = expected_regex__zip_code('zip_code') -%}
    {%- set zip_plus_four_code_regex = expected_regex__zip_code('zip_plus_four_code') -%}
    {%- set zip_extension_regex = expected_regex__zip_code('zip_extension') -%}

    case 
        {%- for col in column_hierarchy %}
            when {{ col }} ~ '{{ zip_code_regex }}' then {{ col }}
        {%- endfor -%}
        {%- for col in column_hierarchy %}
            when {{ col }} ~ '{{ zip_plus_four_code_regex }}' then left({{ col }}, 5)
        {%- endfor %}
        else null
    end
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode__zip_plus_four_code.sql">
{%- macro recode__zip_plus_four_code() -%}
    {%- set column_hierarchy = [
        "zip_plus_four_code",
        "zip_code",
        "location_zip_code",
        "first_insured_zip_code",
        "first_insured_zip_plus_four_code",
    ] -%}
    {%- set zip_code_regex = expected_regex__zip_code('zip_code') -%}
    {%- set zip_plus_four_code_regex = expected_regex__zip_code('zip_plus_four_code') -%}
    {%- set zip_extension_regex = expected_regex__zip_code('zip_extension') -%}

    case 
        {%- for col in column_hierarchy %}
            when {{ col }} ~ '{{ zip_plus_four_code_regex }}' then {{ col }}
        {%- endfor -%}
        {%- for col in column_hierarchy %}
            when 
                {{ col }} ~ '{{ zip_code_regex }}' 
                and zip_extension_code ~ '{{ zip_extension_regex }}'
            then {{ col }} || '-' || zip_extension_code
        {%- endfor %}
        else null
    end
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/recoding/recode_to_millions.sql">
{%- macro recode_to_millions(column, new_column) -%}

{%- set one_mil = 1000000.0 -%}
{%- set new_column_name=new_column~'_M' -%}

try_cast(
    try_cast(
        {{ column }} as double
    ) / (
        {{ one_mil }}
    ) as integer
) as {{ new_column_name }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/coalesce_credit_variables.sql">
{%- macro coalesce_credit_variables(column, default) -%}

{%- set tbl1='credit_vars__experian_5_2' -%}
{%- set tbl2='credit_vars__experian_2_8' -%}
{%- set tbl3='credit_vars__mosum_after_rpt_date' -%}
{%- set tbl4='credit_vars__mosum_before_rpt_date' -%}

coalesce(
    "{{ tbl1 }}"."{{ column }}",
    "{{ tbl2 }}"."{{ column }}",
    "{{ tbl3 }}"."{{ column }}",
    "{{ tbl4 }}"."{{ column }}"
)

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/col_and_is_col_missing.sql">
{%- macro col_and_is_col_missing(column_name) -%}

{%- if column_name[0:3] != 'is_' -%}
    {%- set missing_col_prefix = '' -%}
{%- else -%}
    {%- set missing_col_prefix = 'is_' -%}
{%- endif -%}

{%- set missing_col_name = missing_col_prefix ~ column_name ~ '_missing' -%}


{{ column_name }},
{{ missing_col_name }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/column_list.sql">
{%- macro column_list(collist)-%} 
    {% for col in collist %}
        {{ col }}{% if not loop.last %},{% endif %}
    {% endfor %}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/dev_date_filter.sql">
{%- macro dev_date_filter(date_col) -%}
    {%- if target.name == 'dev' -%}
        date_sub('month', {{ date_col }}, current_date) <= 12
    {%- else -%}
        1=1
    {%- endif -%}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/easi_variables.sql">
{%- macro easi_variables(x) -%}

    try_cast(rdensity as uinteger) as rdensity__v{{ x }},
    try_cast(rpopcount as uinteger) as rpopcount__v{{ x }},
    try_cast(rhhcount as uinteger) as rhhcount__v{{ x }},
    try_cast(rpopgrow as uinteger) as rpopgrow__v{{ x }},
    try_cast(rpopfore as uinteger) as rpopfore__v{{ x }},
    try_cast(rhhgrow as uinteger) as rhhgrow__v{{ x }},
    try_cast(rhhfore as uinteger) as rhhfore__v{{ x }},
    try_cast(rurbanpop as uinteger) as rurbanpop__v{{ x }},
    try_cast(rruralpop as uinteger) as rruralpop__v{{ x }},
    try_cast(rurban_ind as uinteger) as rurban_ind__v{{ x }},
    try_cast(rpurban2 as uinteger) as rpurban2__v{{ x }},
    try_cast(rpyouth as uinteger) as rpyouth__v{{ x }},
    try_cast(rpsenior as uinteger) as rpsenior__v{{ x }},
    try_cast(rpseniorhh as uinteger) as rpseniorhh__v{{ x }},
    try_cast(reasiqlife as uinteger) as reasiqlife__v{{ x }},
    try_cast(reducindx as uinteger) as reducindx__v{{ x }},
    try_cast(rmedage as uinteger) as rmedage__v{{ x }},
    try_cast(rmedhhsize as uinteger) as rmedhhsize__v{{ x }},
    try_cast(rmedrent as uinteger) as rmedrent__v{{ x }},
    try_cast(rmed_blt as uinteger) as rmed_blt__v{{ x }},
    try_cast(rno_car as uinteger) as rno_car__v{{ x }},
    try_cast(rno_teens as uinteger) as rno_teens__v{{ x }},
    try_cast(rpblcllar as uinteger) as rpblcllar__v{{ x }},
    try_cast(rpwhcllar as uinteger) as rpwhcllar__v{{ x }},
    try_cast(rpconstru as uinteger) as rpconstru__v{{ x }},
    try_cast(rpeducol as uinteger) as rpeducol__v{{ x }},
    try_cast(rpedunohs as uinteger) as rpedunohs__v{{ x }},
    try_cast(rrobbery as uinteger) as rrobbery__v{{ x }},
    try_cast(rburglary as uinteger) as rburglary__v{{ x }},
    try_cast(rcartheft as uinteger) as rcartheft__v{{ x }},
    try_cast(rlarceny as uinteger) as rlarceny__v{{ x }},
    try_cast(rtotcrime as uinteger) as rtotcrime__v{{ x }},
    try_cast(rrprcvacsea as uinteger) as rrprcvacsea__v{{ x }},
    try_cast(rwork_home as uinteger) as rwork_home__v{{ x }},
    try_cast(rmedaghher as uinteger) as rmedaghher__v{{ x }},
    try_cast(rmedhhinc as uinteger) as rmedhhinc__v{{ x }},
    try_cast(rpblt_bf1940 as uinteger) as rpblt_bf1940__v{{ x }},
    try_cast(rpblt_bf1950 as uinteger) as rpblt_bf1950__v{{ x }},
    try_cast(rpblt_bf1960 as uinteger) as rpblt_bf1960__v{{ x }},
    try_cast(rpblt_bf1970 as uinteger) as rpblt_bf1970__v{{ x }},
    try_cast(rpcitnat as uinteger) as rpcitnat__v{{ x }},
    try_cast(rpcitnot as uinteger) as rpcitnot__v{{ x }},
    try_cast(rpfemwidow as uinteger) as rpfemwidow__v{{ x }},
    try_cast(rpmalwidow as uinteger) as rpmalwidow__v{{ x }},
    try_cast(rpownhome as uinteger) as rpownhome__v{{ x }},
    try_cast(rppoor as uinteger) as rppoor__v{{ x }},
    try_cast(rpproptax as uinteger) as rpproptax__v{{ x }},
    try_cast(reasi_agehomes as uinteger) as reasi_agehomes__v{{ x }},
    try_cast(reasi_borninst as uinteger) as reasi_borninst__v{{ x }},
    try_cast(reasi_borninst2 as uinteger) as reasi_borninst2__v{{ x }},
    try_cast(reasi_borninst3 as uinteger) as reasi_borninst3__v{{ x }},
    try_cast(reasi_college as uinteger) as reasi_college__v{{ x }},
    try_cast(reasi_college2 as uinteger) as reasi_college2__v{{ x }},
    try_cast(reasi_constr as uinteger) as reasi_constr__v{{ x }},
    try_cast(reasi_employ as uinteger) as reasi_employ__v{{ x }},
    try_cast(reasi_finance as uinteger) as reasi_finance__v{{ x }},
    try_cast(reasi_income as uinteger) as reasi_income__v{{ x }},
    try_cast(reasi_manuf as uinteger) as reasi_manuf__v{{ x }},
    try_cast(reasi_noearn as uinteger) as reasi_noearn__v{{ x }},
    try_cast(reasi_popcoun as uinteger) as reasi_popcoun__v{{ x }},
    try_cast(reasi_poverty as uinteger) as reasi_poverty__v{{ x }},
    try_cast(reasi_poverty2 as uinteger) as reasi_poverty2__v{{ x }},
    try_cast(reasi_pubassist as uinteger) as reasi_pubassist__v{{ x }},
    try_cast(reasi_ssi as uinteger) as reasi_ssi__v{{ x }},
    try_cast(reasi_ssi2 as uinteger) as reasi_ssi2__v{{ x }},
    try_cast(reasi_unemp16 as uinteger) as reasi_unemp16__v{{ x }},
    try_cast(reasi_valuehm as uinteger) as reasi_valuehm__v{{ x }},
    try_cast(rPTRANCAR as uinteger) as rPTRANCAR__v{{ x }},
    try_cast(rPTRANPUBLIC as uinteger) as rPTRANPUBLIC__v{{ x }},
    try_cast(rPTRAVL30 as uinteger) as rPTRAVL30__v{{ x }},
    try_cast(rPHEALTHCEX as uinteger) as rPHEALTHCEX__v{{ x }},
    try_cast(rPHEALTHINSCEX as uinteger) as rPHEALTHINSCEX__v{{ x }},
    try_cast(rPMEDSERVECEX as uinteger) as rPMEDSERVECEX__v{{ x }},
    try_cast(rPPHYSSERVCEX as uinteger) as rPPHYSSERVCEX__v{{ x }},
    try_cast(rPOTPHYSICCEX as uinteger) as rPOTPHYSICCEX__v{{ x }},
    try_cast(rPTESTSCEX as uinteger) as rPTESTSCEX__v{{ x }},
    try_cast(rPHOSPITALCEX as uinteger) as rPHOSPITALCEX__v{{ x }},
    try_cast(rPNONPRESCEX as uinteger) as rPNONPRESCEX__v{{ x }},
    try_cast(rPPRESCPCEX as uinteger) as rPPRESCPCEX__v{{ x }},
    try_cast(rPSUPPMEDCEX as uinteger) as rPSUPPMEDCEX__v{{ x }},
    try_cast(rPRETSUPPCEX as uinteger) as rPRETSUPPCEX__v{{ x }},
    try_cast(rPLEGALCEX as uinteger) as rPLEGALCEX__v{{ x }},
    try_cast(rPHCSOCEMP as uinteger) as rPHCSOCEMP__v{{ x }},
    try_cast(rPLEGALEMP as uinteger) as rPLEGALEMP__v{{ x }},
    try_cast(rNUMLEGALEST as uinteger) as rNUMLEGALEST__v{{ x }},
    try_cast(rNUMPHYSEST as uinteger) as rNUMPHYSEST__v{{ x }},
    try_cast(rNUMOTHFACEST as uinteger) as rNUMOTHFACEST__v{{ x }},
    try_cast(rNUMHNCFACEST as uinteger) as rNUMHNCFACEST__v{{ x }},
    try_cast(medrent as uinteger) as medrent__v{{ x }},
    try_cast(PLEGALCEX as uinteger) as PLEGALCEX__v{{ x }},
    try_cast(PLEGALEMP as uinteger) as PLEGALEMP__v{{ x }},
    try_cast(rpopcoun as uinteger) as rpopcoun__v{{ x }},
    try_cast(rborninst as uinteger) as rborninst__v{{ x }},
    try_cast(rpop25plus as uinteger) as rpop25plus__v{{ x }},
    try_cast(rcollege as uinteger) as rcollege__v{{ x }},
    try_cast(rcollege2 as uinteger) as rcollege2__v{{ x }},
    try_cast(rpop16plus as uinteger) as rpop16plus__v{{ x }},
    try_cast(remploy as uinteger) as remploy__v{{ x }},
    try_cast(runemp16 as uinteger) as runemp16__v{{ x }},
    try_cast(rciv_empl_pop_16plus as uinteger) as rciv_empl_pop_16plus__v{{ x }},
    try_cast(rconstr as uinteger) as rconstr__v{{ x }},
    try_cast(rmanuf as uinteger) as rmanuf__v{{ x }},
    try_cast(rfinance as uinteger) as rfinance__v{{ x }},
    try_cast(rincome as uinteger) as rincome__v{{ x }},
    try_cast(rhhcoun as uinteger) as rhhcoun__v{{ x }},
    try_cast(rnoearn as uinteger) as rnoearn__v{{ x }},
    try_cast(rssi as uinteger) as rssi__v{{ x }},
    try_cast(rpubassist as uinteger) as rpubassist__v{{ x }},
    try_cast(rpoverty as uinteger) as rpoverty__v{{ x }},
    try_cast(rpoverty2 as uinteger) as rpoverty2__v{{ x }},
    try_cast(ragehomes as uinteger) as ragehomes__v{{ x }},
    try_cast(rvaluehm as uinteger) as rvaluehm__v{{ x }},
    try_cast(in_arealand_eq_0 as uinteger) as in_arealand_eq_0__v{{ x }},
    try_cast(rindex_crime as uinteger) as rindex_crime__v{{ x }},
    try_cast(rindex_houseage as uinteger) as rindex_houseage__v{{ x }},
    try_cast(rindex_employ as uinteger) as rindex_employ__v{{ x }},
    try_cast(rindex_retirepop as uinteger) as rindex_retirepop__v{{ x }},
    try_cast(rindex_urban as uinteger) as rindex_urban__v{{ x }},
    try_cast(rindex_age as uinteger) as rindex_age__v{{ x }},
    try_cast(rindex_homeownershp as uinteger) as rindex_homeownershp__v{{ x }},
    try_cast(rindex_education as uinteger) as rindex_education__v{{ x }},
    try_cast(rindex_retiredpopage as uinteger) as rindex_retiredpopage__v{{ x }},
    try_cast(rindex_incedu as uinteger) as rindex_incedu__v{{ x }},
    try_cast(rindex_crime_unwt as uinteger) as rindex_crime_unwt__v{{ x }},
    try_cast(rindex_houseage_unwt as uinteger) as rindex_houseage_unwt__v{{ x }},
    try_cast(rindex_employ_unwt as uinteger) as rindex_employ_unwt__v{{ x }},
    try_cast(rindex_retirepop_unwt as uinteger) as rindex_retirepop_unwt__v{{ x }},
    try_cast(rindex_urban_unwt as uinteger) as rindex_urban_unwt__v{{ x }},
    try_cast(rindex_age_unwt as uinteger) as rindex_age_unwt__v{{ x }},
    try_cast(rindex_homeownershp_unwt as uinteger) as rindex_homeownershp_unwt__v{{ x }},
    try_cast(rindex_education_unwt as uinteger) as rindex_education_unwt__v{{ x }},
    try_cast(rindex_retiredpopage_unwt as uinteger) as rindex_retiredpopage_unwt__v{{ x }},
    try_cast(rindex_incedu_unwt as uinteger) as rindex_incedu_unwt__v{{ x }},

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/expect__expect_col1_ge_col2.sql">
{%- macro expect__expect_col1_ge_col2(
    model,
    col1,
    col2,
    row_condition=None
) -%}

{%- set expression -%}
    coalesce(try_cast({{ col1 }} as double), 0.0) >= coalesce(try_cast({{ col2 }} as double), 0.0)
{%- endset -%}

{{ expect__expression_is_true(
    model,
    expression=expression,
    group_by_columns=None,
    row_condition=row_condition
) }}

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/first_report_date_after_date.sql">
{%- macro first_report_date_after_date(date_col, new_date_col, source_tbl) %}
select
    * exclude (
        -- these are helper columns that are not needed after this step
        im_year,
        im_year_plus_1,
        im_month,
        im_month_plus_1,
        im_day,
        rpt_day,
        prev_rpt_day,
        error_year,
        month_1,
        month_9
    ),
    case
        when im_year >= 2010 then 
            (case 
                when im_day <= rpt_day then
                    {{ mdy_to_date('im_month', 'rpt_day', 'im_year') }}
                when im_month < 12 and im_day > rpt_day then
                    {{ mdy_to_date('im_month_plus_1', 'rpt_day', 'im_year') }}
                when im_month = 12 and im_day > rpt_day then
                    {{ mdy_to_date('month_1', 'rpt_day', 'im_year_plus_1') }}        
                -- this will function as a code that says this branch failed:
                else {{ mdy_to_date('month_1', 'month_1', 'error_year') }}
            end)
        when im_year = 2009 then
            (case
                when im_month >= 9 and im_day <= prev_rpt_day then
                    {{ mdy_to_date('im_month', 'prev_rpt_day', 'im_year') }}
                when im_month < 12 and im_day > prev_rpt_day then
                    {{ mdy_to_date('im_month_plus_1', 'prev_rpt_day', 'im_year') }}
                when im_month = 12 and im_day > prev_rpt_day then
                    {{ mdy_to_date('month_1', 'rpt_day', 'im_year_plus_1') }}
                -- this will function as a code that says this branch failed:
                else {{ mdy_to_date('month_1', 'rpt_day', 'error_year') }}
            end)

        
        -- this will function as a code that says this branch failed:
        else {{ mdy_to_date('rpt_day', 'rpt_day', 'error_year') }}
    end as {{ new_date_col }}

from (
    select
        *,
        year({{ date_col }}) as im_year,
        year({{ date_col }}) + 1 as im_year_plus_1,
        1 as month_1,
        9 as month_9,
        month({{ date_col }}) as im_month,
        month({{ date_col }})+1 as im_month_plus_1,
        day({{ date_col }}) as im_day,
        2 as rpt_day,
        1 as prev_rpt_day,
        2001 as error_year
    
    from {{ source_tbl }}
)
{% endmacro -%}
</file>

<file path="bop_modeling_data/macros/first_report_date_before_date.sql">
{%- macro first_report_date_before_date(date_col, new_date_col, source_tbl) %}
select
    * exclude (
        -- these are helper columns that are not needed after this step
        im_year,
        im_year_minus_1,
        im_month,
        im_month_minus_1,
        im_day,
        rpt_day,
        prev_rpt_day,
        error_year
    ),
    case
        when im_year >= 2010 then 
            {# 
            starting in 2010, the monthly batch processing happened on the 2nd of the month
            #}
            (case 
                
                when im_day > rpt_day then
                    -- if the day of the month is after the report day,
                    -- the report month is the current month
                    {{ mdy_to_date('im_month', 'rpt_day', 'im_year') }}
                
                else
                    -- if the day of the month is on or before the report day,
                    -- the report month is the previous month
                    case when im_month = 1 then
                        -- if the current month is January, have to decrement the year
                        -- as well as the month
                        {{ mdy_to_date('month_12', 'rpt_day', 'im_year_minus_1') }}
                    else
                        -- otherwise just decrement the month
                        {{ mdy_to_date('im_month_minus_1', 'rpt_day', 'im_year') }}
                    end
            end)
        
        when im_year = 2009 then
            -- September through December 2009, the monthly batch processing happened
            -- on the 1st of the month. The logic is otherwise the same as 2010
            -- and later, but the report day is different.
            (case
                when im_day > prev_rpt_day then
                    {{ mdy_to_date('im_month', 'prev_rpt_day', 'im_year') }}
                else
                    case when im_month = 1 then
                        {{ mdy_to_date('month_12', 'prev_rpt_day', 'im_year_minus_1') }}
                    else
                        {{ mdy_to_date('im_month_minus_1', 'prev_rpt_day', 'im_year') }}
                    end
            end)

        
        -- this will function as a code that says this branch failed:
        else {{ mdy_to_date('rpt_day', 'rpt_day', 'error_year') }}
    end as {{ new_date_col }}

from (
    select
        *,
        year({{ date_col }}) as im_year,
        year({{ date_col }}) - 1 as im_year_minus_1,
        1 as month_1,
        9 as month_9,
        12 as month_12,
        month({{ date_col }}) as im_month,
        month({{ date_col }})-1 as im_month_minus_1,
        day({{ date_col }}) as im_day,
        2 as rpt_day,
        1 as prev_rpt_day,
        2001 as error_year
    
    from {{ source_tbl }}
)
{% endmacro -%}
</file>

<file path="bop_modeling_data/macros/generate_date_index.sql">
{%- macro generate_date_index(datecol) -%}
12 * year({{ datecol }}) + month({{ datecol }}) - 1
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/hr_components__load_lookups.sql">
{%- macro hr_components__load_lookups(lookup_list) -%}

{%- for lookup_name in lookup_list -%}
    {{ hr_components__load_one_lookup(lookup_name) }} {%- if not loop.last -%}, {%- endif -%}
{%- endfor -%}

{%- endmacro -%}

{%- macro hr_components__load_one_lookup(lookup_name) -%}
{{ lookup_name }} as (from {{ ref('hr_components__' ~ lookup_name) }})
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/init_sql.sql">
{%- macro init_sql() -%}
create schema if not exists raw;

{{ __init_tbl('gl_aiv') }}
{{ __init_tbl('cf_aiv') }}
{{ __init_tbl('dlf') }}

{%- endmacro -%}


{%- macro __init_tbl(table_name) -%}
    create or replace view raw.{{table_name}} as (
        select *
        from read_csv_auto('{{ var("raw_csv_folder") }}"/{{table_name}}.csv')
    );
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/is_missing_var.sql">
{%- macro is_missing_var(column) -%}

{%- if column[:2] == 'is' -%}
    {%- set new_column_name = column ~ '_missing'-%}
{%- else -%}
    {%- set new_column_name = 'is_' ~ column ~ '_missing'-%}
{%- endif -%}

case
    when {{ column }} is null then 1
    when try_cast({{ column }} as text) = 'Missing' then 1
    else 0
end as {{ new_column_name }},

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/is_uw_method_std.sql">
{%- macro is_uw_method_std(column_name) -%}
case
    when {{column_name}} = 'STD' then 1
    else 0
end as is_uw_method_std
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/is_value_positive.sql">
{%- macro is_value_positive(column_name) -%}
case when {{ column_name }} > 0 then 1 else 0 end as is_{{ column_name | replace('_', '') }}_positive
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/log1p.sql">
{%- macro log1p(column_name) -%}
case 
    when 1 + {{ column_name }} <= 0 then null
    else log(1 + {{ column_name }})
end as log1p__{{ column_name }}
{%- endmacro -%}

{%- macro exp1m(column_name) -%}
exp(log1p__{{ column_name }}) - 1 as {{ column_name }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/logit.sql">
{%- macro logit(column_name) -%}
    case
        when {{ column_name }} <= 0 or {{ column_name }} >= 1 then null
        else log({{ column_name }} / (1 - {{ column_name }}))
    end as logit__{{ column_name }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/make_n_prior_year_cols.sql">
{#%
macro make_prior_year_cols(data, relative_date=policy_eff_date, compare_date=date_of_loss, n_prior_years=5, n_month_lag=4);
    data &data.;
        set &data.;
        %_declareNewVarLengths(&n_prior_years.) 8.;
        %_buildEvalDate(&relative_date., &n_month_lag.);
        %_buildPriorYearCols(&relative_date., &n_prior_years.);

        if date_of_loss > eval_date then nth_prior_year=0;
        else do;
            %_slotTransactionsIntoPriorYears(&compare_date., &n_prior_years.);
        end;
    run;
%mend make_prior_year_cols;
#}

{%- macro make_n_prior_year_cols(
    dataset_name,
    relative_date='policy_eff_date',
    compare_date='billing_activity_date',
    n_prior_years=5,
    n_month_lag=4
) -%}
    with

    raw as (
        select *
        from {{ dataset_name }}
    ),

    add_eval_date as (
        select
            *,
            {{ _build_eval_date(relative_date, n_month_lag) }}

        from raw
    ),

    add_prior_year_columns as (
        select
            *,
            {{ _build_prior_year_cols(relative_date, n_prior_years) }}

        from add_eval_date
    ),

     slot_trans_into_prior_years as (
        select
            *,
            {{ _slot_transactions_into_prior_years(compare_date, n_prior_years) }} as prior_year

        from add_prior_year_columns
    )

    select *
    from slot_trans_into_prior_years

{%- endmacro -%}

{#
NOT NEEDED--------------------

%macro _declareNewVarLengths(n_prior_years);
    length eval_date 
    %do i=1 %to %eval(&n_prior_years.+1);
        yr&i._prior_date
    %end;
        nth_prior_year
%mend _declareNewVarLengths;

#}

{#
%macro _buildEvalDate(relative_date, n_months);
    eval_date=intnx('month', &relative_date., -&n_months., 's');
%mend _buildEvalDate;
#}

{%- macro _build_eval_date(relative_date, n_months=4) -%}
    {{ _build_n_month_prior_column(relative_date, 4) }} as eval_date
{%- endmacro -%}

{#
%macro _buildNMonthPriorCols(relative_date, n_months=12);
    %let n_yr=%sysfunc(round(%sysevalf(&n_months./12)));
    %let col=yr&n_yr._prior_date;
    &col.=intnx('month', &relative_date., -n_months., 's');
%mend _buildNMonthPriorCols;

#}

{%- macro _build_n_month_prior_column(relative_date, n_months) -%}
    try_cast( {{ relative_date }} - interval {{ n_months }} months as date)
{%- endmacro -%}

{%- macro _build_n_year_prior_column(relative_date, n_years) -%}
    try_cast( {{ relative_date }} - interval {{ n_years }} year as date)
{%- endmacro -%}

{#
%macro _buildPriorYearCols(relative_date, n_prior_years);
    %let finalYear = %eval(&n_prior_years. + 1);
    %do i=1 %to &finalYear.;
        %let m=%eval(12 * &i.);
        %_buildNMonthPriorCols(&relative_date., &m.);
    %end;
%macro _buildPriorYearCols;
#}

{%- macro _build_prior_year_cols(relative_date, n_prior_years) -%}
    {%- set __final_year = n_prior_years + 1 -%}
    {%- for i in range(__final_year) -%}

        {%- set __year = i + 1 -%}
        {{ _build_n_year_prior_column(relative_date, i) }} as yr{{ __year }}_prior_date{%- if i != __final_year -%},{%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{#
%macro _slotTransactionsIntoPriorYears(compare_date, n_prior_years);
    if &compare_date. <= yr1_prior_date and &compare_date. > yr2_prior_date 
        then nth_prior_year=1;

    %do i=2 %to %eval(&n_prior_years. + 1);
        %let col1=yr&i._prior_date;

        %let next_yr=%eval(&i.+1);
        %let col2=yr&next_yr._prior_date;

        else if &compare_date. <= &col1.
            and &compare_date. > &col2.
            then nth_prior_year=&i.;
    %end;

    else nth_prior_year=9999;
%mend _slotTransactionsIntoPriorYears;
#}

{%- macro _slot_transactions_into_prior_years(compare_date, n_prior_years) -%}

    {%- set __final_year = n_prior_years + 1 -%}
    case
        when {{ compare_date }} <= yr1_prior_date 
            and {{ compare_date }} > yr2_prior_date
            then 1
        {%- for i in range(__final_year) -%}
            {%- if i > 1 -%}
                {%- set next_yr = i + 1 -%}
                {%- set __col1 = 'yr' ~ i ~ '_prior_date' -%}
                {%- set __col2 = 'yr' ~ next_yr ~ '_prior_date' -%}

                when {{ compare_date }} <= {{ __col1 }}
                    and {{ compare_date }} > {{ __col2 }}
                    then {{ i }}
            {%- endif -%}
        {%- endfor -%}

        else 9999
    end
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/mosum_columns.sql">
{%- macro mosum_columns__select() -%}

{%- set prepend = "mosum__" -%}
{%- set mosum_cols = [
    "mo_sum_sk",
    "agency_zip_code",
    "is_building_only",
    "contractor_group",
    "company_state_code",
    "completed_ops_group",
    "is_composite_rated",
    "emp_size_code",
    "experian_bin",
    "experian_naics",
    "lob_code",
    "naics",
    "is_new_package",
    "is_package",
    "policy_id",
    "policy_state",
    "has_premops",
    "prevailing_fire_protection_class",
    "prevailing_policy_type",
    "prevailing_state",
    "risk_type",
    "state_codes",
    "agency_total_premium",
    "agency_total_volume",
    "n_all_trades",
    "amount_of_insurance",
    "average_balance",
    "avg_building_size",
    "bad_trade_ratio",
    "balance_90",
    "balance_regular_trade_lines",
    "total_balance",
    "commercial_intelliscore",
    "n_derogatory_uccs",
    "experience_rmf",
    "hazard_grade",
    "n_indeterminate_trades",
    "n_judgements",
    "late_ratio",
    "n_liens",
    "ebc_manual_premium_amount",
    "n_classes",
    "n_derogatory_legal_items",
    "n_locations",
    "n_years_in_file",
    "non_pay_cancel_count_prev1",
    "non_pay_cancel_count_prev2",
    "non_pay_cancel_count_prev3",
    "n_months_in_cincibill_prev1",
    "n_months_in_cincibill_prev2",
    "n_months_in_cincibill_prev3",
    "payment_count_prev1",
    "payment_count_prev2",
    "payment_count_prev3",
    "pct_agency_premium",
    "policy_age",
    "policy_prem",
    "prev_1yr_claim_count",
    "prev_2yr_claim_count",
    "prev_3yr_claim_count",
    "prev_4yr_claim_count",
    "prev_5yr_claim_count",
    "prev_1yr_loss_amount",
    "prev_2yr_loss_amount",
    "prev_3yr_loss_amount",
    "prev_4yr_loss_amount",
    "prev_5yr_loss_amount",
    "prev_1yr_premium",
    "prev_2yr_premium",
    "prev_3yr_premium",
    "prev_4yr_premium",
    "prev_5yr_premium",
    "prev_1yr_nb_claim_count",
    "prev_2yr_nb_claim_count",
    "prev_3yr_nb_claim_count",
    "has_fire_claim_last_3_years",
    "has_water_claim_last_3_years",
    "has_gl_claim_last_3_years",
    "prev_nb_premium_amount",
    "prevailing_contents_deductible",
    "prevailing_single_limit",
    "n_risk_units",
    "n_states",
    "total_3yr_claim_count_closed_no_payment",
    "total_5yr_claim_count",
    "total_gl_premium_ratio",
    "ucc_ratio",
    "year_hash",
    "n_zero_trades",
    "n_zips"
] -%}

{%- for col in mosum_cols -%}
    "{{ col }}" as "{{ prepend }}{{ col }}"{%- if not loop.last %},{% endif %}
{%- endfor -%}

{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/prem_ratio.sql">
{%- macro prem_ratio(num, denom, name) -%}
case when {{ denom }} = 0 then 0 else {{ num }} / {{ denom }} end as {{ name }}
{%- endmacro -%}
</file>

<file path="bop_modeling_data/macros/select_naics_cd.sql">
{%- macro select_naics_cd() -%}

case 
    when bop_primary_naics != '000000' and bop_primary_naics != 'Missing' then bop_primary_naics
    when account_naics_code != '000000' and account_naics_code != 'Missing' then account_naics_code
    when experian_first_naics_code != '000000' and experian_first_naics_code != 'Missing' then experian_first_naics_code
    when first_insured_naics_code != '000000' and first_insured_naics_code != 'Missing' then first_insured_naics_code
    when experian_second_naics_code != '000000' and experian_second_naics_code != 'Missing' then experian_second_naics_code
    when experian_third_naics_code != '000000' and experian_third_naics_code != 'Missing' then experian_third_naics_code
    when experian_fourth_naics_code != '000000' and experian_fourth_naics_code != 'Missing' then experian_fourth_naics_code
    else 'Missing'
end as naics_cd

{%- endmacro -%}
</file>

<file path="bop_modeling_data/models/00_raw/decfile/raw__decfile__sb_aiv_lookup.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/decfile.aiv_lookup.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/decfile/raw__decfile__screngn_policy_lookup.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/decfile.screngn_policy_lookup.csv')
)

select * 
from raw
</file>

<file path="bop_modeling_data/models/01_stg/current_cincibill/stg__cur_cb__xcd_bil_act_summary.sql">
with

raw as (
    select 
        bil_account_id_hash as billing_acct_key,
        bil_account_id as billing_acct_id,
        
        bil_acy_dt as billing_activity_date,
        bil_acy_seq as billing_activity_sequence_numb,
        bil_acy_amt as billing_activity_amt,
        
        pol_symbol_cd as policy_sym,
        pol_nbr as policy_numb,
        bil_acy_des_cd as billing_activity_desc_cd,
        bil_des_rea_typ as billing_activity_desc_reason_type

    from {{ ref('stg__screngn__xcd_bil_act_summary') }}
    order by bil_account_id_hash 
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/current_cincibill/stg__cur_cb__xcd_bil_cash_dsp.sql">
with


raw as (
    select distinct
        bil_account_id_hash as billing_acct_key,
        md5_number(XCD_POLICY_ID) as billing_policy_key,
        POL_SYMBOL_CD as policy_sym,
        POL_NBR as policy_numb,
        POL_EFFECTIVE_DT as policy_eff_date

    from {{ ref('stg__screngn__xcd_bil_cash_dsp') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/current_cincibill/stg__cur_cb.sql">
with

dates as (select * from {{ ref('lkp__dates') }}),

billing_policies as (   
    select distinct 
        billing_sb_policy_key,
        associated_policy_key,
        associated_sb_policy_key,
        billing_acct_key,
        billing_policy_key

    from {{ ref('lkp__billing_policies') }}
    order by billing_sb_policy_key
),

act_summary as (
    select
        billing_acct_key,
        billing_activity_date,
        billing_activity_sequence_numb,
        billing_activity_amt
    
    from {{ ref('stg__cur_cb__xcd_bil_act_summary') }}
    where
        billing_activity_desc_cd='C' 
        and billing_activity_desc_reason_type is null
    order by 
        billing_acct_key, 
        billing_activity_date
),

join_policies_to_acct_summary as (
    select 
        act.*,
        pol.* exclude (billing_acct_key)

    from act_summary as act 
    inner join billing_policies as pol 
        on act.billing_acct_key = pol.billing_acct_key

    where associated_sb_policy_key is not null
)

select *
from join_policies_to_acct_summary
</file>

<file path="bop_modeling_data/models/01_stg/decfile/stg__decfile__sb_policy_lookup.sql">
with

raw as (
    select
        sb_policy_key,
        policy_chain_id,
        lob,
        company_numb,
        policy_sym,
        policy_numb,
        policy_module,
        policy_eff_date

    from {{ ref('raw__decfile__sb_policy_lookup') }}
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/modcom/_schema.yml">
models:
  - name: stg__modcom__policy_chain_v3
    columns:
      - name: five_key_hash
        data_type: hugeint
        description: |-
          Calculated as:

          ```sql
          -- DuckDb-flavored SQL
          md5_number(try_cast(company_numb as varchar) 
                      || policy_sym 
                      || try_cast(policy_numb as varchar) 
                      || try_cast(policy_module as varchar)
                      || try_cast(policy_eff_date as varchar))
          ```
        data_tests:
          - not_null
          - unique
      - name: three_key_hash
        data_type: hugeint
        description: |-
          Calculated as:

          ```sql
          -- DuckDb-flavored SQL
          md5_number(policy_sym 
                      || try_cast(policy_numb as varchar) 
                      || try_cast(policy_eff_date as varchar))
          ```
        data_tests:
          - not_null
      - name: policy_chain_id
        data_type: uinteger
        description: Defines the policies chained together that can be used as prior policies for our current SB policy set.
        data_tests:
          - not_null
          - relationships:
              field: policy_chain_id
              to: ref('raw__modcom__policy_chain_v3')
      - name: company_numb
        data_type: utinyint
        data_tests:
          - accepted_values:
              values:
                - 1
                - 3
                - 5
                - 7
                - 4
          - not_null
      - name: policy_sym
        data_type: varchar
        data_tests:
          - not_null
      - name: policy_numb
        data_type: uinteger
        data_tests:
          - not_null
      - name: policy_module
        data_type: uinteger
        data_tests:
          - not_null
      - name: policy_eff_date
        data_type: timestamp
        data_tests:
          - not_null
    description: Simple list of policy_chain_id, the five-key, the three-key, and md5 hashes of the five- and three-keys. Sorted by the five key hash then the three key hash.
</file>

<file path="bop_modeling_data/models/02_lkp/lkp__policy_chain_ids.sql">
with

raw as (
    select 
        policy_chain_id,
        count(*) as n_sb_policies_for_policy_chain_id

    from {{ ref('stg__decfile__sb_policy_lookup') }}
    group by policy_chain_id
),

pchain as (
    select distinct
        policy_chain_id,
        {{ five_key() }}

    from {{ ref('stg__modcom__policy_chain_v3') }}

    order by 
        policy_chain_id,
        {{ five_key() }}
),

join_pchain as (
    select 
        raw.*,
        pchain.* exclude (policy_chain_id)

    from raw 
    inner join pchain 
        on raw.policy_chain_id = pchain.policy_chain_id
),

count_total_policies_associated_with_policy_chain as (
    select 
        policy_chain_id,
        n_sb_policies_for_policy_chain_id,
        count(*) as n_total_policies_for_policy_chain_id

    from join_pchain
    group by 
        policy_chain_id,
        n_sb_policies_for_policy_chain_id

    order by policy_chain_id
)

select *
from count_total_policies_associated_with_policy_chain
</file>

<file path="bop_modeling_data/models/03_fct/fct__associated_policy_eff_date.sql">
with

policies as (
    select 
        associated_policy_key,
        policy_eff_date
        
    from {{ ref('lkp__associated_policies') }}
),

dates as (
    select 
        input_date as policy_eff_date,
        n_prior_years,
        prior_year_start,
        prior_year_end

    from {{ ref('lkp__dates') }}
),

eff_date_lkp as (
    select 
        policies.associated_policy_key,
        dates.*

    from policies 
    left join dates
        on policies.policy_eff_date = dates.policy_eff_date
    where dates.policy_eff_date is not null
)

select *
from eff_date_lkp
order by 
    associated_policy_key,
    n_prior_years
</file>

<file path="bop_modeling_data/models/07_tmp/lkp__associated_policies_counts/_lkp__associated_policies_counts__add_final_associated_policy_key.sql">
{{
    config(materialization='ephemeral')
}}

with

associated_policies as (
    select * exclude (associated_policies__nrows)
    from {{ ref('_lkp__associated_policies_counts__associated_policies') }}
),

add_final_associated_policy_key as (
    select 
        associated_policy_key,
        associated_sb_policy_key,
        policy_chain_id,
        {{ five_key() }},
        count(*) over() as add_final_associated_policy_key__nrows 

    from associated_policies
    order by 
        associated_sb_policy_key,
        policy_chain_id,
        {{ five_key() }}
)

select *
from add_final_associated_policy_key
</file>

<file path="bop_modeling_data/models/07_tmp/lkp__associated_policies_counts/_lkp__associated_policies_counts__associated_policies.sql">
{{
    config(materialization='ephemeral')
}}

with

filtered_policy_chains as (
    select * exclude (filtered_policy_chains__nrows)
    from {{ ref('_lkp__associated_policies_counts__filtered_policy_chains') }}
),

associated_policies as (
    select distinct
        {{ policy_key() }} as associated_policy_key,
        associated_sb_policy_key,
        policy_chain_id,
        {{ five_key() }},
        count(*) over() as associated_policies__nrows

    from filtered_policy_chains
    order by 
        associated_policy_key,
        associated_sb_policy_key,
        policy_chain_id,
        {{ five_key() }}
)

select *
from associated_policies
</file>

<file path="bop_modeling_data/models/07_tmp/lkp__associated_policies_counts/_lkp__associated_policies_counts__policy_chain.sql">
{{
    config(materialization='ephemeral')
}}

with

policy_chain as (
    select distinct
        policy_chain_id,
        {{ five_key() }},
        count(*) over() as policy_chain__nrows

    from {{ ref('stg__modcom__policy_chain_v3') }}
    order by 
        policy_chain_id,
        {{ five_key() }}
)

select *
from policy_chain
</file>

<file path="bop_modeling_data/models/sources.yml">
sources:
  - name: raw 
    database: bop_modeling_data
    schema: raw
</file>

<file path="bop_modeling_data/tests/test_that_no_duplicated_policies_in_lkp__associated_policies.sql">
select *
from {{ ref('lkp__associated_policies') }}
where __is_gt1_five_key_in_table = 1
</file>

<file path="pyproject.toml">
[project]
name = "bop-modeling-data-2025"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "dbt>=1.0.0.38.22",
    "dbt-duckdb>=1.9.1",
    "duckdb>=1.1.3",
]
</file>

<file path="bop_modeling_data/macros/recoding/recode__sas_date_format.sql">
{% macro recode__sas_date_format(date_column) -%}
        {%- set text_col -%}
            try_cast({{ date_column }} as varchar)
        {%- endset -%}

        try_cast(
            concat(
                right({{ text_col }}, 4),
                '-',
                list_position(
                    ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],
                    upper(substring({{ text_col }}, 3, 3))
                ),
                '-',
                left({{ text_col }}, 2)
            ) as date
        )
{% endmacro -%}
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_account.sql">
with

raw as (
    select * 
    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_account.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_act_summary.sql">
with

raw as (
    select * 
    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_act_summary.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_policy.sql">
with

raw as (
    select *

    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_policy.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/decfile/_schema.yml">
models:
  - name: raw__decfile__sb_aiv_lookup
    columns:
      - name: sb_policy_key
        data_type: bigint
      - name: policy_chain_id
        data_type: bigint
      - name: sb_aiv_key
        data_type: bigint
      - name: lob
        data_type: varchar
      - name: cfxmlid
        data_type: varchar
      - name: coverage_component_agreement_id
        data_type: varchar
      - name: image_eff_date
        data_type: date
      - name: class_code
        data_type: varchar
      - name: cincipak_class_code
        data_type: varchar
      - name: coalesced_class_code
        data_type: varchar
      - name: location_numb
        data_type: bigint
      - name: building_numb
        data_type: bigint
      - name: zip_code
        data_type: bigint
  - name: raw__decfile__sb_policy_lookup
    columns:
      - name: policy_sym
        data_type: varchar
      - name: company_numb
        data_type: bigint
        data_tests:
          - accepted_values:
              values:
                - 1
                - 3
                - 4
                - 5
                - 7
                - 9
      - name: policy_numb
        data_type: bigint
      - name: policy_module
        data_type: bigint
      - name: policy_eff_date
        data_type: date
      - name: policy_chain_id
        data_type: bigint
        description: Policy chain ID from `MODCOM.POLICY_CHAIN_V3` matched to this policy.
        data_tests:
          - not_null
      - name: lob
        data_type: varchar
        data_tests:
          - not_null
          - accepted_values:
              values:
                - prop
                - liab
                - auto
                - wc
      - name: sb_policy_key
        data_type: bigint
        description: Small business policy key from the decision file data process
        data_tests:
          - not_null
          - unique
    description: |-
      `sb_policy_lookup` from the decicion file process.

      Each row corresponds to **one policy - LOB combination**
</file>

<file path="bop_modeling_data/models/00_raw/decfile/raw__decfile__sb_policy_lookup.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/decfile.policy_lookup.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/01_stg/current_cincibill/stg__cur_cb__xcd_bil_policy.sql">
with

raw as (
    select 
        bil_account_id_hash as billing_acct_key,
        bil_account_id as billing_acct_id,
        bil_account_nbr as billing_acct_numb,
        
        pol_symbol_cd as policy_sym,
        pol_nbr as policy_numb,
        *

    from {{ ref('stg__screngn__xcd_bil_policy') }}
    order by 
        policy_sym,
        policy_numb
)

select *
from raw
</file>

<file path="bop_modeling_data/models/06_chk/chk__lkp__associated_policies__row_counts.sql">
with

sb_policies as (
    select * 
    from {{ ref('_lkp__associated_policies_counts__sb_policies') }}
),

policy_chain as (
    select * 
    from {{ ref('_lkp__associated_policies_counts__policy_chain') }}
),

filtered_policy_chains as (
    select * 
    from {{ ref('_lkp__associated_policies_counts__filtered_policy_chains') }}
),

associated_policies as (
    select * 
    from {{ ref('_lkp__associated_policies_counts__associated_policies') }}
),

add_final_associated_policy_key as (
    select * 
    from {{ ref('_lkp__associated_policies_counts__add_final_associated_policy_key') }}
),

get_counts as (
    select 1 as ord, 'sb_policies' as cte, sb_policies__nrows as cnt from sb_policies
    union all 
        select 2 as ord, 'policy_chain' as cte, policy_chain__nrows as cnt from policy_chain
    union all   
        select 3 as ord, 'filtered_policy_chains' as cte, filtered_policy_chains__nrows as cnt from filtered_policy_chains
    union all 
        select 4 as ord, 'associated_policies' as cte, associated_policies__nrows as cnt from associated_policies
    union all 
        select 5 as ord, 'add_final_associated_policy_key' as cte, add_final_associated_policy_key__nrows as cnt from add_final_associated_policy_key
),

final as (
    select distinct
        ord,
        cte,
        cnt as row_count


    from get_counts
    group by 
        ord,
        cte,
        row_count

    order by ord
)

select cte, row_count
from final
</file>

<file path="bop_modeling_data/models/00_raw/billing/_schema.yml">
models:
  - name: raw__screngn__xcd_bil_account
    description: Raw data from `SCRENGN.XCD_BIL_ACCOUNT`, filtered to only include policy symbols identified as related to our sb_policy_key policies via `MODCOM.POLICY_CHAIN_V3`
    columns:
      - name: BIL_ACCOUNT_ID
        description: |-
          **Full Name** - Billing Account Identifier  
          **Length**  - 8   
          **Description** - Uniquely generated technical identification for an account number. Almost always available as a joining key.
        data_type: varchar
        quote: true
      - name: BIL_ACCOUNT_NBR
        data_type: bigint
        quote: true
        description: |-
          **Full Name** - Billing Account Number  
          **Length**  - 30   
          **Description** - Identifier unique in the billing system which groups policies for an invoice. For single policy this is equal to policy symbol, and policy number. Only included in a few tables.
      - name: BIL_CLASS_CD
        data_type: varchar
        quote: true
        description: '**Full Name** - Billing Class Code.    **Length**  - 3   **Description** - Defined codes which sub-defines billing types. Dictates the use of a particular Billing Support plan. This code allows for the assignment of different sets of rules within a specified billing type. These values are defined in the Billing Description Reason entity with a type code of BCL.'
      - name: BAT_PAY_CLT_ID
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Paying Client Identifier.   
          **Length**  - 20  
          **Description** - Identification for individual who is paying the account. This will also be the client who will receive the billing invoice when not billing under a Third party or agent. Maintained by the CLIENT system.
      - name: BAT_START_DUE_DT
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Start Due Date.   
          **Length**  - *date*
          **Description** - This date specifies the initial due date which will be evaluated when producing an invoice for the billing account.
      - name: BAT_LAST_DAY_IND
        data_type: bigint
        quote: true
        description: |-
          **Full Name** - Billing Account Last Day of the Month Indicator.   
          **Description** - Specifies the use of the last day of the month as the billing account due date.   
          **Values**  
          9 = Use the 29th day of the month as the account due date  
          0 = Use the 30th day of the month as the account due date  
          1 = Use the last day of the month as the account due date  
          -1= Use the day of the month as specified in Billing account start due date
      - name: BIL_START_RFR_DT
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Start Reference Date. 
          **Length**  - *date*
          **Description** - Ending date for the billing period for billing items on a specific due/account date. Establising this date as earlier than the start due date will establish billing in arrears whereas establishing this date later than the start due date will establish billing in advance.
      - name: BIL_RFR_LST_DAY
        data_type: bigint
        quote: true
        description: |-
          **Full Name** - Billing Reference Last Day. 
          **Length**  - 1
          **Description** - Specifies use of the last day of month for billing reference date. 
          **Values**  
          0 = Print on the 30th day of month
          9 = Print on the 29th day of month
          1 = Print on the last day of month
          -1 = use day of month specified in Billing start reference date
      - name: BIL_SUS_FU_REA_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Suspense Follow-Up Reason Code 
          **Length**  - 3
          **Description** - Defined code which specifies the reason for suspending the billing and follow-up for an account, policy, or third party. These values are defined in the Billing Description Reason entity with type codes of SBF, SBI, and SBO. The following code(s) are pre-defined for internal processing
          **Values**  
          SB = Suspended billing and followup
          SS = Suspended billing
      - name: BAT_PREV_BAL_AMT
        data_type: double
        quote: true
        description: |-
          **Full Name** - Billing Account Previous Balance Amount
          **Length**  - 14.2
          **Description** - The previous total amount due on the account. This is the amount which appeared on the last invoice.
      - name: BIL_LOK_TS
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Lock Timestamp  
          **Length**  - *timestamp*
          **Description** - The date and time a lock was placed on an account, third party, or agent account.
      - name: BAT_CASH_STATUS_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Bill Account Cash Status Code  
          **Length**  - 1
          **Description** - Code in the billing system which describes the suspended cash automatic disbursement status.  
          **Values**  
          A = Active
          D = Suspended / Hold Auto Disbursement
      - name: BIL_SUS_DSB_REA_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Suspend Disbursements Reason Code  
          **Length**  - 3
          **Description** - Defined code which specifies the reason for suspending the automatic disbursements process for a Direct Bill account. These values are defined in the Billing Description Reason entity with type code of SBC.
          **Values**  
          DB = Suspend Disbursements
          DC = Suspend Disbursement Cn Credit
          DE = Suspend Disbursement Endorsement
          DL = Suspend Disbursement Collection
          DN = Suspend Disbursement National Disaster
      - name: APP_MIGRATION_CD
        data_type: varchar
        quote: true
        description: Not in the documentation.
      - name: BIL_START_DED_DT
        data_type: varchar
        quote: true
        description: Not in the documentation.
      - name: BIL_START_DED_RFR_DT
        data_type: varchar
        quote: true
        description: Not in the documentation.
      - name: BIL_TYPE_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Type Code
          **Length**  - 2
          **Description** - This code represents the types of billing such as one policy or multiple policies for a billing account, third party billing, or agency billing. Defined values are in the Billing Description Reason entity with billing type code(s) of BTY, BTG and BTP. The following code(s) are predefined for internal processing:
          **Values**  
          SP = Single Policy (predefined)
      - name: BIL_TYPE_DESC
        data_type: varchar
        quote: true
        description: '**Full Name** - Billing Type Description'
      - name: BAT_STATUS_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Status Code
          **Length**  - 1
          **Description** - Code in the billing system which describes the account status.
          **Values**  
          A = Active
          I = Inactive
          S = Billing Suspended
          B = Billing / Follow-up Suspended
          F = Follow-up Suspended
      - name: BAT_STATUS_DESC
        data_type: varchar
        quote: true
        description: '**Full Name** - Billing Account Status Description'
      - name: BIL_PRESENTMENT_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Bill Presentment Code  
          **Length**  - 3
          **Description** - Code that specifies the billing invoice presentment method.
          **Values**  
          PPR = Paper
          EML = Email
          EPP = Email & Paper
      - name: BIL_PRESENTMENT_DESC
        data_type: varchar
        quote: true
        description: '**Full Name** - Bill Presentment Description'
      - name: BIL_COLLECTION_MTH
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Collection Method  
          **Length**  - 3
          **Description** - Defined code used to describe a billing collection method. These values are defined in the Billing Description Reason entity with type codes of CHC, CET, and CTP. The following code(s) are pre-defined for internal processing. DI = Automatic Direct-Invoice ECC = EFT credit card
      - name: BIL_COLLECTION_METHOD_DESC
        data_type: varchar
        quote: true
        description: '**Full Name** - Billing Collection Method  Description'
      - name: BIL_COLLECTION_PLN
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Collection Plan  
          **Length**  - 4
          **Description** - Identifies the plan used with the EFT collection methods.
      - name: BIL_COLLECTION_PLN_DESC
        data_type: varchar
        quote: true
        description: '**Full Name** - Billing Collection Plan  Description'
      - name: bil_account_id_hash
        data_type: bigint
        description: "'`sha256` hash of `bil_account_id`. Can be used in joins since an integer should be easier to lookup.'"
  - name: raw__screngn__xcd_bil_act_summary
    description: Raw data from `SCRENGN.XCD_BIL_ACT_SUMMARY`, filtered to only include policy symbols identified as related to our sb_policy_key policies via `MODCOM.POLICY_CHAIN_V3`
    columns:
      - name: BIL_ACCOUNT_ID
        data_type: varchar
        quote: true
      - name: BIL_ACY_DT
        data_type: varchar
        quote: true
      - name: BIL_ACY_SEQ
        data_type: bigint
        quote: true
        description: |-
          **Full Name** - Account Summary Activity Sequence Number  
          **Length**  - *16-bit integer*
          **Description** - The sequence the activity is added to the Billing system within a date. **It is not displayed on any screen, nor is it printed on any report.**
      - name: POL_SYMBOL_CD
        data_type: varchar
        quote: true
        description: Policy symbol
      - name: POL_NBR
        data_type: varchar
        quote: true
        description: Policy number
      - name: BIL_ACY_DES_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Activity Description Code  
          **Length**  - 3
          **Description** - User defined code which represents an activity that has occurred for an account. The following code(s) are pre-defined for internal processing.
          **Values**  
          ASB = Agent Statement balanced
          BCC = Bill class change
          BTA = Account bill type change
          BTC = Bill type change
          BTT = Bill account transfer
          CM = Manual payment write-off
          CMC = Collection method change
          CMR = Reverse manual payment write-off
          CR = Credit into cash
          CS = Cash from credit
          CST = Company statement
          DBR = Disburse manual
          DMR = Reverse manual disburse
          IDC = Statement due date change
          OPY = Balance write-off overpay
          PLN = Collection plan change
          PNC = Payor name/address change
          RC = Reverse payment - company mistake
          RDC = Reference date change
          RN = Reverse payment - nsf
          RP = Reverse payment- protested
          RPL = Reporting level change
          SDC = Start date change
          STT = Statement
          UPY = Balance underpay
          REI - Request for Auto Reinstatement
          NRD - No Rescind due to Postmark Date
          NRE - No Auto Reinstatement Requested
          CIA - Corrected Invoice
          RIF - Renewal Inforce
          CCT - Credit Card Tape Processed
      - name: BIL_DES_REA_TYP
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Description Reason Type  
          **Length**  - 3
          **Description** - Type of billing object or event described.  

          **The following code(s) are pre-defined for internal processing:**
            
          Spaces = system defined activity
          ACH = PACS payments
          AMT = Amount types for payable items
          ASO = Apply Suspense Overpayment Options
          AST = Account status
          BAA = Amount type audits
          BAM = Billing amount effective indicator
          BAS = Amount type for taxes, fees, and surcharges
          BAT = Billing item
          BCL = Billing classes
          BIT = Payable item for billing items
          BPA = Payable item for audits
          BPS = Payable item for taxes, fees, and surcharges
          BSC = Batch Status for Cash/Credit Card
          BSE = Batch Status for EFT Rejections
          BTG = Agent account bill type
          BTP = Third party bill type
          BTS = Bill Type Display
          BTY = Bill type other than third party or agent
          CAT = Commission amount type
          CET = EFT collection method
          CHC = Hard copy collection method
          CIT = Commission billing item
          CPM = Check production method
          CPY = Credit card payment
          CST = Account cash status
          CTP = Tape collection method
          CTR = Transferred cash
          CWA = Payment write-off
          CWM = Manual payment write-off
          CWR = Reverse payment write-off
          DBA = Automatic disbursement
          DBR = Manual disbursement reasons
          DBS = Disburse status description
          DCR = Match discrepancy types
          DNC = NSF (non-sufficient funds) forgiven
          DRV = Reversed disbursement due to stop pay or void
          DSO = Match discrepancy code on unmatched items
          DSP = Cash disposition types
          EAT = EFT bank account type
          EDT = Date Edits
          ENS = Reversal of EFT payment due to
          NSF(non-sufficient funds)
          EPR = EFT prenote rejection
          ERP = Reversal of EFT payment due to other than
          NSF(non-sufficient funds)
          ESM = EFT secondary collection method
          EST = EFT Status
          FQY = Frequency
          GRV = Agent statement entry review status
          GST = Agent account status
          IST = Installment Invoice Status
          LOB = Lines of business
          MCH = Match reasons
          MCT = Match type
          PID = Processed Indicator
          PRV = Payment reversal codes
          PST = Policy status
          PTS = System Plans Identifier Type
          PYS = Payment sources
          PYT = Cash payment types
          QSP = Quote Scheduling Policy/Account
          RAD = Receipt Activity Display
          RAH = Receipt Activity History
          RBA = Resume billing and follow-up automatic
          RBM = Resume billing and follow-up manual
          RCT = Receipt Description
          REV = Receipts processing verify codes
          REX = Overpayment
          RFA = Resume follow-up automatic
          RFM = Resume follow-up manual
          RSA = Resume billing automatic
          RSC = Account cash status, Resume
          RSM = Resume billing manual
          RVD = Reversed disbursement due to resuspend or reversal
          RW1 = Rev prm w/o due to BPC or CR
          SBC = Account cash status, Suspend
          SBF = Suspense billing and follow-up
          SBI = Suspense billing
          SBO = Suspense follow-up
          SCA = Service Charge Action
          SCT = Service Charge Type
          SUS = Suspense reasons
          TRF = Policy premium transfer reasons
          TST = Third party status
          UIT = Unidentified Cash Identifier Type
          U%% = Customer defined activity codes
          WPA = Write off of scheduled amounts automatic
          WPG = Agent statement balance write off
          WPI = Third party write off
          WPR = Write off of scheduled amounts manual
          WRR = Write-off reversals manual and automatic
          W01 = Full pay service charge write off
      - name: BIL_ACY_DES1_DT
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Summary Activity Description 1 Date  
          **Length**  - *date*
          **Description** - Additional date information that further describes the activity. The date displayed will vary according to the activity described. In the case of a new premium item, this date would contain the premium effective date. For an invoice item, this date would contain invoice due date, etc.
      - name: BIL_ACY_DES2_DT
        data_type: varchar
        quote: true
        description:
          '**Full Name** - Billing Account Summary Activity Description 2 Date  **Length**  - *date*

          **Description** - Additional date information that further describes the activity when more than one date is needed to fully describe an activity. In the case of a new premium item, this date would contain the company statement due date'
      - name: BIL_ACY_AMT
        data_type: double
        quote: true
        description: |-
          **Full Name** - Billing Account Summary Activity Amount  
          **Length**  - 14.2
          **Description** - The amount of premium or cash associated with the activity.
      - name: USER_ID
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - User Identification  
          **Length**  - 8
          **Description** - A unique identifier assigned to an individual user. May be any alpha-numeric value.
      - name: BIL_ACY_TS
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Activity Timestamp   
          **Length**  - *timestamp*
          **Description** - The date and time the activity is added to the Billing system. **It is not reported on any screen, nor is it printed any report.**
      - name: BAS_ADD_DATA_TXT
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Summary Additional Data Text  
          **Length**  - 100
          **Description** - Additional data that further describes the activity. This data is optional. For change processing, the data stored in this column may contain the previous and new values. For example, for a Policy Plan change, this column may contain the previous Policy Plan Code and the new Policy Plan Cod
      - name: bil_account_id_hash
        data_type: bigint
        description: '`sha256` hash of `bil_account_id`. Can be used in joins since an integer should be easier to lookup.'
  - name: raw__screngn__xcd_bil_cash_dsp
    description: Raw data from `SCRENGN.XCD_BIL_CASH_DSP`, filtered to only include policy symbols identified as related to our sb_policy_key policies via `MODCOM.POLICY_CHAIN_V3`
    columns:
      - name: BIL_ACCOUNT_ID
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Identifier  
          **Length**  - 8   
          **Description** - Uniquely generated technical identification for an account number. Almost always available as a joining key.
      - name: BIL_DTB_DT
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Distribution Date  
          **Length**  - *date*   
          **Description** - The date the cash was distributed to a specific account or to unidentified cash.
      - name: BIL_DTB_SEQ_NBR
        data_type: bigint
        quote: true
        description: |-
          **Full Name** - Billing Distribution Sequence Number   
          **Length**  - *16-bit integer*   
          **Description** - The sequence of checks within a distribution date.
      - name: BIL_DSP_SEQ_NBR
        data_type: bigint
        quote: true
        description: |-
          **Full Name** - Billing Disposition Sequence Number   
          **Length**  - *16-bit integer*   
          **Description** - The sequence of dispositions within a distribution date.
      - name: BIL_SEQ_NBR
        data_type: bigint
        quote: true
        description: |-
          **Full Name** - Billing Sequence Number   
          **Length**  - *16-bit integer*   
          **Description** - Sequential number used to create unique rows.
      - name: XCD_POLICY_ID
        data_type: varchar
        quote: true
        description: "**Full Name** - Policy Identification  **Length**  - 16   **Description** - This is a unique identifier for each policy. It is the technical key for all Premium (UWS) poli\x02cies"
      - name: POL_SYMBOL_CD
        data_type: varchar
        quote: true
        description: Policy symbol
      - name: POL_NBR
        data_type: varchar
        quote: true
        description: Policy number
      - name: POL_EFFECTIVE_DT
        data_type: varchar
        quote: true
        description: Policy effective date
      - name: DWS_STATUS_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Disbursement Status Code   
          **Length**  - 1   
          **Description** - This code denotes the current state of the disbursement.  
          **Values**  
          C = Cancel
          D = Disbursed
          E = Escheated
          H = Hold
          I = Combined Payment
          O = Offset For Onset
          P = Pending
          Q = Select Combined
          R = Stop Pay Request
          S = Stop Pay
          U = Honored
          V = Void No Reprint
          W = Escheat Wait
          T = Reserved for external application (future use)
          X = Reserved for external application (future use)
          Y = Reserved for external application (future use)
          Z = Reserved for external application (future use)
      - name: BIL_REVS_RSUS_IND
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Cash Receipt Reverse Resuspend Indicator   
          **Length**  - 1   
          **Description** - This indicator defines the disposition as history after a reversal, or resuspension of applied cash, disbursement write-off.   
          **Values**  
          *A = Transfer pending to an account
          R = Disposition fully reversed
          S = Disposition re-suspended
          Blank = Disposition equal to current activity
          *G = Transfer pending to an agent account
          *T = Transfer pending to a third party
          C = Request cancel of disbursement due to resuspend
          D = Disbursement requested
          *X = Credit start pending(Temporary value)
          *P = Reversal pending
          *N = Third party reconciliation not complete
          *E = Request cancel of disbursement due to reversal
          *Z = Payments which were backed and need to be reapplied
          as part of a bill plan change
          * - Indicates temporary values
      - name: BIL_DSP_REASON_CD
        data_type: varchar
        quote: true
        description: "**Full Name** - Billing Disposition Reason Code   **Length**  - 3bil-   **Description** - User defined code indicating the reason that a cash disposition has been written off, dis\x02bursed, or suspended. These values are defined in the Billing Description Reason entity with type codes of CWM, DBS, SUS, PYS, PRV, DBR, PRV and DBR."
      - name: BIL_DSP_AMT
        data_type: double
        quote: true
        description: |-
          **Full Name** - Billing Cash Disposition Amount   
          **Length**  - 14.2   
          **Description** - The amount of cash associated with the activity.
      - name: BIL_ADJ_DUE_DT
        data_type: varchar
        quote: true
        description: "**Full Name** - Billing Installment Adjusted Due Date   **Length**  - *date*   **Description** - The date an installment is due. This date will be calculated by the system and may be overrid\x02den by the user on the schedule screen."
      - name: BIL_INV_DT
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Invoice Date     
          **Length**  - *date*   
          **Description** - The date the invoice will be formatted for print.
      - name: BIL_DSP_DT
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Disposition Sequence Number   
          **Length**  - *16-bit integer*   
          **Description** - The sequence of dispositions within a distribution date.
      - name: BIL_DSP_TYPE_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Disposition Type Code   
          **Length**  - 2   
          **Description** - A code which identifies the activity type for this row. These values are defined for verbiage purposes only in the Billing Description Reason entity.   

          **The following code(s) are pre-defined for internal processing:**  

          SP = Suspended
          DB = Disbursed
          DR = Disbursement reversed or resuspended
          AP = Applied
          WO = Written-off
          WR = Resuspend Write-off
          WU = Write off as a result of third party reconciliation
          TF = Transferred
          RV = Reversed
      - name: ACTIVITY
        data_type: varchar
        quote: true
        description: |-
          Not in the documentation.
      - name: BIL_CRG_TYPE_CD
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Service Charge Types   
          **Length**  - 1   
          **Description** - This code indicates whether the amount is for a service charge, penalty charge, late charge, and/or down payment fee.  
          **Values**  
          S = Service Charge
          P = Penalty Charge
          L = Late Charge
          D = Down Payment fee
      - name: PAYMENT_IDENTIFIER
        data_type: varchar
        quote: true
        description: |-
          Not in the documentation.
      - name: bil_account_id_hash
        data_type: bigint
        description: '''{{ doc("bil_account_id_hash") }}'''
  - name: raw__screngn__xcd_bil_cash_receipt
    columns:
      - name: BIL_ACCOUNT_ID
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Identifier  
          **Length**  - 8   
          **Description** - Uniquely generated technical identification for an account number. Almost always available as a joining key.
      - name: BIL_DTB_DT
        data_type: varchar
        quote: true
      - name: BIL_DTB_SEQ_NBR
        data_type: bigint
        quote: true
      - name: BIL_DEPOSIT_DT
        data_type: varchar
        quote: true
      - name: BIL_RCT_AMT
        data_type: double
        quote: true
      - name: BIL_RCT_ID
        data_type: varchar
        quote: true
      - name: BIL_RCT_RECEIVE_DT
        data_type: varchar
        quote: true
      - name: BIL_CSH_ETR_MTH_CD
        data_type: varchar
        quote: true
      - name: BIL_RCT_TYPE_CD
        data_type: varchar
        quote: true
      - name: PAYMENT_TYPE
        data_type: varchar
        quote: true
      - name: bil_account_id_hash
        data_type: bigint
  - name: raw__screngn__xcd_bil_des_reason
    columns:
      - name: BIL_DES_REA_CD
        data_type: varchar
        quote: true
      - name: BIL_DES_REA_TYP
        data_type: varchar
        quote: true
      - name: PRI_LGG_CD
        data_type: varchar
        quote: true
      - name: BIL_DES_REA_DES
        data_type: varchar
        quote: true
      - name: BDR_LONG_DES
        data_type: varchar
        quote: true
      - name: BIL_ACT_BAL_SUM_CD
        data_type: varchar
        quote: true
  - name: raw__screngn__xcd_bil_ist_schedule
    columns:
      - name: BIL_ACCOUNT_ID
        data_type: varchar
        quote: true
        description: |-
          **Full Name** - Billing Account Identifier  
          **Length**  - 8   
          **Description** - Uniquely generated technical identification for an account number. Almost always available as a joining key.
      - name: XCD_POLICY_ID
        data_type: varchar
        quote: true
      - name: BIL_SEQ_NBR
        data_type: bigint
        quote: true
      - name: POL_EFFECTIVE_DT
        data_type: varchar
        quote: true
      - name: BIL_INV_DT
        data_type: varchar
        quote: true
      - name: BIL_ADJ_DUE_DT
        data_type: varchar
        quote: true
      - name: BIL_REFERENCE_DT
        data_type: varchar
        quote: true
      - name: BIL_PRM_IST_AMT
        data_type: double
        quote: true
      - name: BIS_CRE_FUT_AMT
        data_type: double
        quote: true
      - name: BIS_CNC_FUT_AMT
        data_type: double
        quote: true
      - name: BIS_CRE_OPN_AMT
        data_type: double
        quote: true
      - name: BIS_CNC_OPN_AMT
        data_type: double
        quote: true
      - name: BIS_PRM_PAID_AMT
        data_type: double
        quote: true
      - name: BIS_WRO_PRM_AMT
        data_type: double
        quote: true
      - name: BIS_CRE_PAID_AMT
        data_type: double
        quote: true
      - name: BIL_INVOICE_CD
        data_type: varchar
        quote: true
      - name: INVOICED
        data_type: boolean
        quote: true
      - name: BIS_NON_TRM_DT_IND
        data_type: varchar
        quote: true
      - name: INVOICE_TYPE
        data_type: varchar
        quote: true
      - name: bil_account_id_hash
        data_type: bigint
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_cash_dsp.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_cash_dsp.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_cash_receipt.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_cash_receipt.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_des_reason.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_des_reason.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_ist_schedule.sql">
with

raw as (
    select *

    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_ist_schedule.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_pol_proc_req.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_pol_proc_req.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/00_raw/billing/raw__screngn__xcd_bil_policy_trm.sql">
with

raw as (
    select *
    from read_csv_auto('{{ var("raw_csv_loc") }}/screngn__xcd_bil_policy_trm.csv')
)

select *
from raw
</file>

<file path="bop_modeling_data/models/02_lkp/_schema.yml">
models:
  - name: lkp__associated_policies
    description: |-
      This lookup table provides mappings for each policy *associated with* a policy from our decicion file processing. Here "associated with" means "shares a `policy_chain_id` with".  

      The table:  
      1. Gives each associated policy a unique integer ID
    columns:
      - name: associated_policy_key
        data_type: bigint
        data_tests:
          - not_null
          - unique
      - name: associated_sb_policy_key
        data_type: bigint
        data_tests:
          - not_null
          - relationships:
              field: sb_policy_key
              to: ref('raw__decfile__sb_policy_lookup')
      - name: policy_chain_id
        data_type: uinteger
        data_tests:
          - not_null
          - relationships:
              field: policy_chain_id
              to: ref('raw__modcom__policy_chain_v3')
      - name: company_numb
        data_type: utinyint
        data_tests:
          - not_null
          - relationships:
              field: company_numb
              to: ref('raw__modcom__policy_chain_v3')
      - name: policy_sym
        data_type: varchar
      - name: policy_numb
        data_type: uinteger
        data_tests:
          - not_null
      - name: policy_module
        data_type: uinteger
      - name: policy_eff_date
        data_type: timestamp
      - name: is_gt1_five_key_in_table
        data_type: integer
      - name: __is_gt1_five_key_in_table
        data_type: utinyint
  - name: lkp__billing_policies
    description: This model connects account- and policy-level identifiers from CinciBill to those developed in the decision file data process. A common set of integer keys will be used for building datamart tables.
    columns:
      - name: associated_policy_key
        description: This uniquely identifies the policy that is associated with a SB policy by way of the policy chain.
        data_type: hugeint
        tests:
          - not_null
      - name: associated_sb_policy_key
        description: This describes the first SB policy key the row is associated to (in the case that multiple policies are themselves associated by way of the policy chain)
        data_type: uinteger
        tests:
          - not_null
      - name: billing_acct_key
        data_type: bigint
      - name: billing_policy_key
        data_type: hugeint
      - name: billing_policy_id
        data_type: varchar
      - name: billing_acct_id
        data_type: varchar
      - name: policy_sym
        data_type: varchar
      - name: policy_numb
        data_type: uinteger
      - name: policy_eff_date
        data_type: date
      - name: billing_sb_policy_key
        data_type: bigint
  - name: lkp__sb_policy_key
    description: Currently should be the same as `stg__decfile__sb_policy_key`, but will materialize a lookup table model for later performance.
    columns:
      - name: sb_policy_key
        data_type: bigint
        description: Unique identifier for the policy-lob combination used in the BOP Decision file data processing. Integer starting at 1 and is the sorted ordering of the five-key and policy_chain_id.
      - name: policy_chain_id
        data_type: bigint
      - name: lob
        data_type: varchar
        description: Line of business
        data_tests:
          - accepted_values:
              values:
                - prop
                - liab
          - not_null
      - name: company_numb
        data_type: bigint
        data_tests:
          - accepted_values:
              values:
                - 1
                - 3
                - 4
                - 5
                - 7
                - 9
          - not_null
        description: Company number
      - name: policy_sym
        data_type: varchar
        description: Policy symbol. This list is a bit more restrictive than the similar one for associated policies, since the SB decision file is built off the AIV's, which only use eClas data.
        data_tests:
          - not_null
          - accepted_values:
              values:
                - ETD
                - ECP
                - ELD
                - ENP
                - EPP
                - ETN
      - name: policy_numb
        data_type: bigint
        description: Policy number. Up to 7 digits.
        data_tests:
          - not_null
      - name: policy_module
        data_type: bigint
        data_tests:
          - not_null
      - name: policy_eff_date
        data_type: date
        description: |-
          Policy effective date
        data_tests:
          - not_null
  - name: lkp__billing_activity
    description: Lookup model setting an activity transaction key for future activity count feature engineering.
    columns:
      - name: activity_trans_key
        data_type: hugeint
      - name: associated_policy_key
        data_type: hugeint
      - name: associated_sb_policy_key
        data_type: uinteger
      - name: billing_activity_date
        data_type: date
      - name: billing_activity_amt
        data_type: double
  - name: lkp__first_billing_activity
    description: First billing activity date is analogous to report date in the world of claim counts.
    columns:
      - name: activity_trans_key
        description: Unique identifier for a billing activity transaction.
        data_type: hugeint
        data_tests:
          - not_null
          - unique
      - name: first_billing_activity_date
        description: Minimum of the billing activity date from the lkp__billing_activity model.
        data_type: date
        data_tests:
          - not_null
  - name: lkp__dates
    columns:
      - name: input_date
        data_type: date
      - name: n_prior_years
        data_type: integer
      - name: prior_year_start
        data_type: date
      - name: prior_year_end
        data_type: date
  - name: lkp__policy_chain_ids
    columns:
      - name: policy_chain_id
        data_type: bigint
      - name: n_sb_policies_for_policy_chain_id
        data_type: bigint
      - name: n_total_policies_for_policy_chain_id
        data_type: bigint
</file>

<file path="bop_modeling_data/models/02_lkp/lkp__associated_policies.sql">
{{
  config(
    materialized='table',
    unique_key='associated_policy_key'
)}}

with

tmp_tbl as (
    select *
    from {{ ref('_lkp__associated_policies_counts') }}
),

check_for_duplicated_policies as (
    select 
        *,
        case 
            when count(*) over(partition by associated_sb_policy_key, {{ five_key() }}) > 1 
                then 1
            else 0
        end as is_gt1_five_key_in_table

    from tmp_tbl
),

finalize_types as (
    select
        associated_policy_key,
        try_cast(associated_sb_policy_key as uint32) as associated_sb_policy_key,
        policy_chain_id,
        company_numb,
        policy_sym,
        policy_numb,
        policy_module,
        try_cast(policy_eff_date as date) as policy_eff_date,
        try_cast(is_gt1_five_key_in_table as uint8) as __is_gt1_five_key_in_table

    from check_for_duplicated_policies
)

select *
from finalize_types
</file>

<file path="bop_modeling_data/models/02_lkp/lkp__billing_policies.sql">
with

raw_billing_pols as (
    select distinct
        bil_account_id_hash as billing_acct_key,
        md5_number(XCD_POLICY_ID) as billing_policy_key,
        XCD_POLICY_ID as billing_policy_id,
        BIL_ACCOUNT_ID as billing_acct_id,
        POL_SYMBOL_CD as policy_sym,
        try_cast(POL_NBR as uint32) as policy_numb,
        POL_EFFECTIVE_DT as policy_eff_date

    from {{ ref('stg__screngn__xcd_bil_cash_dsp') }}
    order by
        billing_acct_key,
        billing_policy_key,
        policy_eff_date
),

associated_policies as (
    select 
        associated_policy_key,
        associated_sb_policy_key,
        policy_chain_id,
        {{ five_key() }}

    from {{ ref('lkp__associated_policies') }}
),

filter_raw_billing_policies as (
    select 
        associated_policies.associated_policy_key,
        associated_policies.associated_sb_policy_key,
        raw_billing_pols.* 

    from raw_billing_pols
    left join associated_policies
        on raw_billing_pols.policy_sym = associated_policies.policy_sym
        and raw_billing_pols.policy_numb = associated_policies.policy_numb
        and raw_billing_pols.policy_eff_date = associated_policies.policy_eff_date

    where associated_policies.associated_policy_key is not null

    order by 
        associated_policies.associated_policy_key,
        associated_policies.associated_sb_policy_key,
        raw_billing_pols.billing_acct_key,
        raw_billing_pols.billing_policy_key,
        raw_billing_pols.policy_eff_date
),

add_billing_sb_policy_key as (
    select
        row_number() over() as billing_sb_policy_key,
        *

    from filter_raw_billing_policies
)


select *
from add_billing_sb_policy_key
</file>

<file path=".github/workflows/ci-docs.yml">
name: CI & Deploy dbt Documentation

on:
  push:
    branches:
      - main

jobs:
  test-and-deploy-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write 

    steps:
      - name: Checkout code 
        uses: actions/checkout@v4
    
      - name: Set up Python
        uses: actions/setup-python@v4 
        with:
          python-version: '3.13'
    
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv sync

      - name: Copy profiles.yml
        run: |
          mkdir -p /home/runner/.dbt
          cp profiles-sample.yml /home/runner/.dbt/profiles.yml
    
      - name: Generate dbt static docs
        run: |
          . .venv/bin/activate
          cd bop_modeling_data
          dbt docs generate --static
          deactivate
          mkdir -p ../docs
          cp ./target/static_index.html ../docs
          cp ./target/static_index.html ..
          cd ..
    
      - name: Deploy to GitHub pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: docs
</file>

<file path="bop_modeling_data/dbt_project.yml">
name: 'bop_modeling_data'
version: '1.0.0'

profile: 'bop_modeling_db'

model-paths: ['models']
analysis-paths: ['analyses']
test-paths: ['tests']
seed-paths: ['seeds']
macro-paths: ['macros']
snapshot-paths: ['snapshots']

clean-targets:
  - 'target'
  - 'dbt_packages'

models:
  bop_modeling_data:
    +materialized: view
    +docs:
      show: true
    00_raw:
      +materialized: table
      +tags:
        - raw
    01_stg:
      +materialized: view
      +tags:
        - stg
    02_lkp:
      +materialized: table
      +tags:
        - lkp
    03_dim:
      +materialized: view
      +tags:
        - dim
    07_tmp:
      +materialized: table
      +schema: zz__tmp
      +docs:
        show: false
      +tags:
        - tmp

vars:
  raw_csv_loc: '/sas/data/project/EG/ActShared/SmallBusiness/Modeling/dat/raw_csv'
  decfile_loc: '/sas/data/project/EG/ActShared/SmallBusiness/DecisionSupportFile/Development/2025/20250228'
  policy_eff_date__min_yrmo: 200901

flags:
  send_anonymous_usage_stats: false
</file>

</files>
